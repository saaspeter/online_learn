package platform.social.dao.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.cache.annotation.Cacheable;

import platform.bean.BeanFactory;
import platform.social.dao.LeavemessageDao;
import platform.social.dto.LeavemessageQuery;
import platform.social.vo.Leavemessage;
import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.cache.CacheSynchronizer;


public class LeavemessageDaoImpl extends BaseDao implements LeavemessageDao {

	static Logger log = Logger.getLogger(LeavemessageDaoImpl.class.getName());
	
    /**
     *
     */
    public LeavemessageDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    @Cacheable(value="platform.socialContentCache", key="'LeavemessageDao.selectByPK~'+#pk", unless="#result==null")
    public Leavemessage selectByPK(Long pk){
    	if(pk==null)
    		return null;
    	Leavemessage record = (Leavemessage) this.queryForObject("Leavemessage.selectByPK", pk);
		return record;
    }
           
    /**
     * select records by queryVO
     * don't cache it, qry cache in: LeavemessageLogicImpl.qryMessagePage
     */
    public List selectByVO(LeavemessageQuery queryVO){
		if(queryVO==null)
			return new ArrayList();
		List list = this.queryForList("Leavemessage.selectByVO", queryVO);
		return list;
    }
    
    /**
     * select page by queryVO 
     * don't cache it, qry cache in: LeavemessageLogicImpl.qryMessagePage
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    public Page selectByVOPage(LeavemessageQuery queryVO,int pageIndex,int pageSize,Integer total){
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = 15;
        Page page = null;
        String sqlStr = "";
        if(queryVO==null){
        	page = Page.EMPTY_PAGE;
        } else {
        	sqlStr = "Leavemessage.selectByVO";
        	page = queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
        }
        return page;
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Leavemessage record){
    	if(record==null)
    		return null;
		Long pk = (Long)super.insert("Leavemessage.insert", record);
		// flush query cache in LeavemessageLogic.qry
		CacheSynchronizer.getInstance().pubFlush("platform.socialContentCache", Leavemessage.ObjectType+"-"+record.getObjecttype(), record.getObjectid());
		return pk;
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Leavemessage record){
    	if(record==null||record.getMessid()==null)
    		return 0;
		int rows = super.update("Leavemessage.updateByPK", record);
		// flush cache
		CacheSynchronizer.getInstance().pubFlush("platform.socialContentCache", Leavemessage.ObjectType+"-"+record.getObjecttype(), record.getObjectid());
		CacheSynchronizer.getInstance().flushCache("platform.socialContentCache", "LeavemessageDao.selectByPK~"+record.getMessid());
		return rows;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Leavemessage save(Leavemessage record){
    	if(record==null)
    		return null;
		if(record.getMessid()==null||record.getMessid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setMessid(pkValue);
    		return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk){
    	if(pk==null)
    		return 0;
    	Leavemessage vo = getInstance().selectByPK(pk);
    	if(vo==null)
    		return 0;
		int rows = super.delete("Leavemessage.deleteByPK", pk);
		
		// flush cache
		CacheSynchronizer.getInstance().pubFlush("platform.socialContentCache", Leavemessage.ObjectType+"-"+vo.getObjecttype(), vo.getObjectid());
		CacheSynchronizer.getInstance().flushCache("platform.socialContentCache", "LeavemessageDao.selectByPK~"+vo.getMessid());
		return rows;
    }
    
    /**
     * delete all child
     */
    public int deleteChildByPK(Long parentid){
    	if(parentid==null)
    		return 0;
		int rows = super.delete("Leavemessage.deleteChildByPK", parentid);
		return rows;
    }
    
	/**
     * insertBatch records of List
     */
//    public int insertBatch(List list){
//    	if(list==null||list.size()<=0)
//    		return 0;
//    	int rows = 0;
//       	rows = super.insertBatch("Leavemessage.insert", list);
//       	return rows;
//    }
    
    /**
     * deleteBatch records by the String Array of PK
     */
//    public int deleteBatchByPK(String[] pkArray){
//    	if(pkArray==null||pkArray.length<=0)
//    		return 0;
//    	int rows = 0;
//    	Long[] arrs = new Long[pkArray.length];
//		for(int i=0;i<pkArray.length;i++){
//			if(pkArray[i]!=null)
//				arrs[i] = new Long(Long.parseLong(pkArray[i]));
//		}
//		rows = super.deleteBatch("Leavemessage.deleteByPK", arrs);
//		return rows;
//    }
    
    /**
     * static spring getMethod
     */
     public static LeavemessageDao getInstance(){
    	 LeavemessageDao dao = (LeavemessageDao)BeanFactory.getBeanFactory().getBean("leavemessageDao");
         return dao;
     }
    
}
