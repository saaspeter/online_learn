package platform.social.dao.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.cache.annotation.Cacheable;

import platform.bean.BeanFactory;
import platform.social.dao.CommentsDao;
import platform.social.dto.CommentsQuery;
import platform.social.vo.Comments;
import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.cache.CacheSynchronizer;


public class CommentsDaoImpl extends BaseDao implements CommentsDao {

	static Logger log = Logger.getLogger(CommentsDaoImpl.class.getName());
	
    /**
     *
     */
    public CommentsDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    @Cacheable(value="platform.socialContentCache", key="'CommentsDao.selectByPK~'+#pk", unless="#result==null")
    public Comments selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Comments record = (Comments) this.queryForObject("Comments.selectByPK", pk);
		return record;
    }
           
    /**
     * select records by queryVO
     */
    public List<Comments> selectByVO(CommentsQuery queryVO){
		if(queryVO==null)
			return new ArrayList();
		List<Comments> list = (List<Comments>)this.queryForList("Comments.selectByVO", queryVO);
		return list;
    }
    
    /**
     * select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    public Page selectByVOPage(CommentsQuery queryVO,int pageIndex,int pageSize,Integer total){
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = 15;
        Page page = null;
        String sqlStr = "";
        if(queryVO==null){
        	page = Page.EMPTY_PAGE;
        } else {
        	sqlStr = "Comments.selectByVO";
        	page = queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
        }
        return page;
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Comments record){
    	if(record==null)
    		return null;
    	record.setSubnum(0);
		Long pk = (Long)super.insert("Comments.insert", record);	
		if(record.getParent()!=null){
			this.updateSubNum(record.getParent(), 1);
		}
		// flush query cache in CommentsLogic.qryComments()
		CacheSynchronizer.getInstance().pubFlush("platform.socialContentCache", Comments.ObjectType+"-"+record.getObjecttype(), record.getObjectid());
		return pk;
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Comments record){
    	if(record==null||record.getCommentid()==null)
    		return 0;
		int rows = super.update("Comments.updateByPK", record);
		// flush cache
		CacheSynchronizer.getInstance().pubFlush("platform.socialContentCache", Comments.ObjectType+"-"+record.getObjecttype(), record.getObjectid());
		CacheSynchronizer.getInstance().flushCache("platform.socialContentCache", "CommentsDao.selectByPK~"+record.getCommentid());
		return rows;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Comments save(Comments record){
    	if(record==null)
    		return null;
		if(record.getCommentid()==null||record.getCommentid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setCommentid(pkValue);
    		return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }
    
    /**
     * 更新comment的子评论数目
     * @param pk
     * @param number
     */
    public void updateSubNum(Long pk, int number){
    	if(pk==null || number==0)
    		return;
    	Comments record = new Comments(); 
    	record.setCommentid(pk);
    	record.setSubnum(number);
		super.update("Comments.updateSubNum", record);
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk){
    	if(pk==null)
    		return 0;
    	Comments vo = getInstance().selectByPK(pk);
    	if(vo==null){
    		return 0;
    	}
		int rows = super.delete("Comments.deleteByPK", pk);
		
		// flush cache
		CacheSynchronizer.getInstance().pubFlush("platform.socialContentCache", Comments.ObjectType+"-"+vo.getObjecttype(), vo.getObjectid());
		CacheSynchronizer.getInstance().flushCache("platform.socialContentCache", "CommentsDao.selectByPK~"+vo.getCommentid());
		return rows;
    }
    
    /**
     * delete all child comments of some comment, call by in Logic, so here no need flush cache
     */
    public int deleteChildByPK(Long parentid){
    	if(parentid==null)
    		return 0;
		int rows = super.delete("Comments.deleteChildByPK", parentid);
		return rows;
    }
    
    public int deleteByObject(String objectid, String objecttype){
    	if(objectid==null||objectid.trim().length()<1
    			||objecttype==null||objecttype.trim().length()<1)
    		return 0;
    	Comments vo = new Comments();
    	vo.setObjectid(objectid);
    	vo.setObjecttype(objecttype);
		int rows = super.delete("Comments.deleteByObject", vo);
		return rows;
    }
    
    /**
     * deleteBatch records by the String Array of PK
     */
//    public int deleteBatchByPK(String[] pkArray){
//    	if(pkArray==null||pkArray.length<=0)
//    		return 0;
//    	int rows = 0;
//    	Long[] arrs = new Long[pkArray.length];
//		for(int i=0;i<pkArray.length;i++){
//			if(pkArray[i]!=null)
//				arrs[i] = new Long(Long.parseLong(pkArray[i]));
//		}
//		rows = super.deleteBatch("Comments.deleteByPK", arrs);
//		return rows;
//    }
    
    /**
     * static spring getMethod
     */
     public static CommentsDao getInstance(){
       	 CommentsDao dao = (CommentsDao)BeanFactory.getBeanFactory().getBean("commentsDao");
         return dao;
     }
    
}
