package platform.shop.dao.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.cache.annotation.Cacheable;

import platform.bean.BeanFactory;
import platform.daoImpl.ShopDaoImpl;
import platform.shop.dao.ShopcontactinfoDao;
import platform.shop.dto.ShopcontactinfoQuery;
import platform.shop.vo.Shopcontactinfo;

import commonTool.base.BaseDao;
import commonTool.cache.CacheSynchronizer;

public class ShopcontactinfoDaoImpl extends BaseDao implements ShopcontactinfoDao {

	static Logger log = Logger.getLogger(ShopcontactinfoDaoImpl.class.getName());
	
	private final static String contact_shop_type = "ContactShopType";
	
    /**
     *
     */
    public ShopcontactinfoDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    @Cacheable(value="platform.shopCache", key="'ShopcontactinfoDao.selectByPK~shopcontactinfo:'+#pk", unless="#result==null")
    public Shopcontactinfo selectByPK(Long pk) {
    	if(pk==null)
    		return null;
       	Shopcontactinfo record = (Shopcontactinfo) this.queryForObject("Shopcontactinfo.selectByPK", pk);
       	// add cache key into key associate map
       	if(record!=null) {
		   CacheSynchronizer.getInstance().buildAssoc("platform.shopCache", 
				"ShopcontactinfoDao.selectByPK~"+Shopcontactinfo.ObjectType+":"+pk);
       	}
       	return record;
    }
    
    /**
     * 查询商店的默认联系方式
     */
    @Cacheable(value="platform.shopCache", key="'ShopcontactinfoDao.selectDefaultByShopid~'+#shopid", unless="#result==null")
    public Shopcontactinfo selectDefaultByShopid(Long shopid) {
    	if(shopid==null)
    		return null;
    	Shopcontactinfo vo = (Shopcontactinfo) this.queryForObject("Shopcontactinfo.selectByShopid", shopid);
    	// add cache key into key associate map
       	if(vo!=null) {
		   CacheSynchronizer.getInstance().buildAssoc("platform.shopCache", 
				"ShopcontactinfoDao.selectDefaultByShopid~"+shopid, 
				new String[]{Shopcontactinfo.ObjectType+":"+vo.getContactinfoid()});
       	}
    	return vo;
    }
       
    /**
     * select records by queryVO
     */
    @Cacheable(value="platform.shopCache", key="'ShopcontactinfoDao.selectByVO~'+#shopid+'~'+#localeid", unless="#result==null")
    public List selectByVO(Long shopid, Long localeid) {
		if(shopid==null)
			return new ArrayList();
		ShopcontactinfoQuery queryVO = new ShopcontactinfoQuery();
		queryVO.setShopid(shopid);
		queryVO.setLocaleid(localeid);
		List list = this.queryForList("Shopcontactinfo.selectByVO", queryVO);
		
		CacheSynchronizer.getInstance().buildAssoc("platform.shopCache", 
				"ShopcontactinfoDao.selectByVO~"+shopid+"~"+localeid, 
				new String[]{contact_shop_type+":"+shopid});
		
		return list;
    }
    
    /**
     * 查询商店已经存在的regionCode
     * @param shopid
     * @param localeid
     * @return
     */
    public String[] selectExistRegionCode(Long shopid, Long localeid){
    	if(shopid==null)
			return new String[]{};
    	ShopcontactinfoQuery queryVO = new ShopcontactinfoQuery();
    	queryVO.setShopid(shopid);
    	queryVO.setLocaleid(localeid);
		List list = this.queryForList("Shopcontactinfo.selectExistRegionCode", queryVO);
		if(list!=null&&list.size()>0){
		    String[] rtnArr = new String[list.size()];
		    list.toArray(rtnArr);
		    return rtnArr;
		}else {
			return new String[]{};
		}
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Shopcontactinfo record) {
    	if(record==null)
    		return null;
		Long pk = (Long)super.insert("Shopcontactinfo.insert", record);
		
		// pub flush search shop result
		CacheSynchronizer.getInstance().pubFlush("platform.shopCache", ShopDaoImpl.ShopRegionCacheKey, record.getRegioncode());
		CacheSynchronizer.getInstance().pubFlush("platform.shopCache", Shopcontactinfo.ObjectType, pk.toString());
		CacheSynchronizer.getInstance().pubFlush("platform.shopCache", contact_shop_type, record.getShopid().toString());
		return pk;
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Shopcontactinfo vo) {
    	if(vo==null||vo.getContactinfoid()==null)
    		return 0;
    	
    	Shopcontactinfo oldvo = selectByPK(vo.getContactinfoid());
    	int rows = super.update("Shopcontactinfo.updateByPK", vo);
		
		// pub flush search shop result
    	if(vo.getRegioncode()!=null && 
    			!vo.getRegioncode().equals(oldvo.getRegioncode()))
    	{
    		CacheSynchronizer.getInstance().pubFlush("platform.shopCache", ShopDaoImpl.ShopRegionCacheKey, oldvo.getRegioncode());
    		CacheSynchronizer.getInstance().pubFlush("platform.shopCache", ShopDaoImpl.ShopRegionCacheKey, vo.getRegioncode());
    	}
    	CacheSynchronizer.getInstance().pubFlush("platform.shopCache", Shopcontactinfo.ObjectType, vo.getContactinfoid().toString());
    	CacheSynchronizer.getInstance().pubFlush("platform.shopCache", contact_shop_type, oldvo.getShopid().toString());
    	
		return rows;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Shopcontactinfo save(Shopcontactinfo record) {
    	if(record==null)
    		return null;
		if(record.getContactinfoid()==null||record.getContactinfoid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setContactinfoid(pkValue);
			return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk) {
    	if(pk==null)
    		return 0;
    	
    	Shopcontactinfo vo = selectByPK(pk);
    	int rows = super.delete("Shopcontactinfo.deleteByPK", pk);
        
        // pub flush search shop result
		CacheSynchronizer.getInstance().pubFlush("platform.shopCache", ShopDaoImpl.ShopRegionCacheKey, vo.getRegioncode());
		CacheSynchronizer.getInstance().pubFlush("platform.shopCache", Shopcontactinfo.ObjectType, pk.toString());
		CacheSynchronizer.getInstance().pubFlush("platform.shopCache", contact_shop_type, vo.getShopid().toString());
		return rows;
    }
    
    /**
     * delete a record by userID
     */
    public int deleteByShopID(Long shopid) {
    	if(shopid==null)
    		return 0;
		int rows = super.delete("Shopcontactinfo.deleteByShopID", shopid);
		return rows;
    }

        
    /**
     * static spring getMethod
     */
     public static ShopcontactinfoDao getInstance() {
       	 ShopcontactinfoDao dao = (ShopcontactinfoDao)BeanFactory.getBeanFactory().getBean("shopcontactinfoDao");
         return dao;
     }
    
}
