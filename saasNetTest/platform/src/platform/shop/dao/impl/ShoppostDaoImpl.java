package platform.shop.dao.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.cache.annotation.Cacheable;

import platform.bean.BeanFactory;
import platform.shop.dao.ShoppostDao;
import platform.shop.dto.ShoppostQuery;
import platform.shop.vo.Shoppost;

import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.cache.CacheSynchronizer;
import commonTool.constant.CommonConstant;

public class ShoppostDaoImpl extends BaseDao implements ShoppostDao {

	static Logger log = Logger.getLogger(ShoppostDaoImpl.class.getName());
	
	private final static String ShoppostShopidType = "postshopidcache";
	
    /**
     *
     */
    public ShoppostDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    @Cacheable(value="platform.shopCache", key="'ShoppostDao.selectByPK~shoppost:'+#pk", unless="#result==null")
    public Shoppost selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Shoppost record = (Shoppost) this.queryForObject("Shoppost.selectByPK", pk);
		return record;
    }
           
//    /**
//     * select records by queryVO
//     */
//    public List selectByVO(ShoppostQuery queryVO){
//		if(queryVO==null)
//			return new ArrayList();
//		List list = this.queryForList("Shoppost.selectByVO", queryVO);
//		return list;
//    }
    
    /**
     * 
     */
    @Cacheable(value="platform.shopCache", 
    		key="'ShoppostDao.selectByVOPage~postshopidcache:'+#shopid+'~'+#status+'~'+#syscode+'~'+#pageIndex+'~'+#pageSize", 
    		   condition="#caption==null or #caption==''")
    public Page selectByVOPage(Long shopid, String caption, Short status, 
				  String syscode,int pageIndex,int pageSize,Integer total){
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;

        Page page = Page.EMPTY_PAGE;
        if(shopid!=null){
        	ShoppostQuery queryVO = new ShoppostQuery();
            queryVO.setShopid(shopid);
            queryVO.setCaption(caption);
            queryVO.setStatus(status);
            queryVO.setSyscode(syscode);
        	page = queryForPage("Shoppost.selectByVO", queryVO, pageIndex, pageSize, total);
        }
        // add cache key into key assoc map
		if(caption==null || caption.trim().length()<1){
		    CacheSynchronizer.getInstance().buildAssoc("platform.shopCache", 
		    			"ShoppostDao.selectByVOPage~"+ShoppostShopidType+":"+shopid+"~"
		    			+status+"~"+syscode+"~"+pageIndex+"~"+pageSize);
		}
		 
        return page;
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Shoppost record){
    	if(record==null)
    		return null;
		Long pk = (Long)super.insert("Shoppost.insert", record);
		record.setId(pk);
		super.insert("Shoppost.insertText", record);
		
		// flush page cache
		CacheSynchronizer.getInstance().flushCache("platform.shopCache", "ShoppostDao.selectByPK~shoppost:"+pk);
		CacheSynchronizer.getInstance().pubFlush("platform.shopCache", ShoppostShopidType, record.getShopid().toString());
        
		return pk;
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Shoppost record){
    	if(record==null||record.getId()==null)
    		return 0;
		int rows = super.update("Shoppost.updateByPK", record);
		super.update("Shoppost.updateTextByPK", record);
		
		// flush page cache
		CacheSynchronizer.getInstance().flushCache("platform.shopCache", "ShoppostDao.selectByPK~shoppost:"+record.getId());
		CacheSynchronizer.getInstance().pubFlush("platform.shopCache", ShoppostShopidType, record.getShopid().toString());
        		
		return rows;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Shoppost save(Shoppost record){
    	if(record==null)
    		return null;
		if(record.getId()==null||record.getId().intValue()==0){
			Long pkValue = this.insert(record);
			record.setId(pkValue);
    		return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk){
    	if(pk==null)
    		return 0;
    	
    	Shoppost vo = selectByPK(pk);
    	if(vo==null){
    		return 0;
    	}
    	super.delete("Shoppost.deleteTextByPK", pk);
		int rows = super.delete("Shoppost.deleteByPK", pk);
		
		// flush page cache
		CacheSynchronizer.getInstance().flushCache("platform.shopCache", "ShoppostDao.selectByPK~shoppost:"+pk);
		CacheSynchronizer.getInstance().pubFlush("platform.shopCache", ShoppostShopidType, vo.getShopid().toString());
        		
		return rows;
    }
       
    /**
     * deleteBatch records by the String Array of PK
     */
//    public int deleteBatchByPK(String[] pkArray){
//    	if(pkArray==null||pkArray.length<=0)
//    		return 0;
//    	int rows = 0;
//    	Long[] arrs = new Long[pkArray.length];
//		for(int i=0;i<pkArray.length;i++){
//			if(pkArray[i]!=null)
//				arrs[i] = new Long(Long.parseLong(pkArray[i]));
//		}
//		String[] sqlArr = new String[]{"Shoppost.deleteTextByPK", "Shoppost.deleteByPK"};
//		super.deleteBatchMutiTable(sqlArr, arrs);
//		rows = pkArray.length;
//		return rows;
//    }
    
    /**
     * 查询超过给定时间的数据，主要是为清理脏数据使用
     * 仅仅返回前600条数据，需要反复调用处理
     */
    public List<Shoppost> selectLongTimeData(Date date, Short status){
		if(date==null || status==null)
			return new ArrayList<Shoppost>();
		ShoppostQuery queryVO = new ShoppostQuery();
		queryVO.setCreatetime(date);
		queryVO.setStatus(status);
		List<Shoppost> list = this.queryForList("Shoppost.selectLongTimeData", queryVO);
		return list;
    }
    
    /**
     * 删除超过给定时间的数据，主要是为清理脏数据使用
     * 目前全部查询出来，假设开始数据应该是每天小于1万条
     */
    public int deleteLongTimeData(Date date, Short status){
		if(date==null || status==null)
			return 0;
		ShoppostQuery queryVO = new ShoppostQuery();
		queryVO.setCreatetime(date);
		queryVO.setStatus(status);
		int rows = super.delete("Shoppost.deleteLongTimeData", queryVO);
		return rows;
    }
    
    /**
     * static spring getMethod
     */
     public static ShoppostDao getInstance(){
       	 ShoppostDao dao = (ShoppostDao)BeanFactory.getBeanFactory().getBean("shoppostDao");
         return dao;
     }
    
}
