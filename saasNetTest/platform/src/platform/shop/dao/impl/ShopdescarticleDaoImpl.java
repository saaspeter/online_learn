package platform.shop.dao.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.cache.annotation.Cacheable;

import platform.bean.BeanFactory;
import platform.shop.dao.ShopdescarticleDao;
import platform.shop.dto.ShopdescarticleQuery;
import platform.shop.vo.Shopdescarticle;

import commonTool.base.BaseDao;
import commonTool.cache.CacheSynchronizer;

public class ShopdescarticleDaoImpl extends BaseDao implements ShopdescarticleDao {

	static Logger log = Logger.getLogger(ShopdescarticleDaoImpl.class.getName());
	
    /**
     *
     */
    public ShopdescarticleDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    @Cacheable(value="platform.shopCache", key="'ShopdescarticleDao.selectByPK~shopdescarticle:'+#pk", unless="#result==null")
    public Shopdescarticle selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Shopdescarticle record = (Shopdescarticle) this.queryForObject("Shopdescarticle.selectByPK", pk);
		// add cache key into key associate map
       	if(record!=null) {
		   CacheSynchronizer.getInstance().buildAssoc("platform.shopCache", 
				"ShopdescarticleDao.selectByPK~"+Shopdescarticle.ObjectType+":"+pk);
       	}
		return record;
    }
    
    /**
     * select some record by logic PK
     */
    @Cacheable(value="platform.shopCache", key="'ShopdescarticleDao.selectByLogicPK~'+#shopid+'~'+#articletype", unless="#result==null")
    public Shopdescarticle selectByLogicPK(Long shopid, Short articletype){
    	if(shopid==null || articletype==null)
    		return null;
    	Shopdescarticle vo = new Shopdescarticle();
    	vo.setShopid(shopid);
    	vo.setArticletype(articletype);
    	// sql中只取第一条记录
		Shopdescarticle record = (Shopdescarticle) this.queryForObject("Shopdescarticle.selectByLogicPK", vo);
		return record;
    }
    
    /**
     * select records by queryVO
     */
    public List selectByVO(ShopdescarticleQuery queryVO){
		if(queryVO==null)
			return new ArrayList();
		List list = this.queryForList("Shopdescarticle.selectByVO", queryVO);
		return list;
    }

    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    //@Caching(evict={@CacheEvict(value="platform.shopCache", key="'ShopdescarticleDao.selectByPK~'+#record.id")})
    public Long insert(Shopdescarticle record){
    	if(record==null)
    		return null;
		Long pk = (Long)super.insert("Shopdescarticle.insert", record);
		
		CacheSynchronizer.getInstance().flushCache("platform.shopCache", "ShopdescarticleDao.selectByPK~"+Shopdescarticle.ObjectType+":"+pk);
		CacheSynchronizer.getInstance().flushCache("platform.shopCache", "ShopdescarticleDao.selectByLogicPK~"+record.getShopid()+"~"+record.getArticletype());
		
		return pk;
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Shopdescarticle vo){
    	if(vo==null||vo.getArticleid()==null)
    		return 0;
		int rows = super.update("Shopdescarticle.updateByPK", vo);
		vo = getInstance().selectByPK(vo.getArticleid());
		CacheSynchronizer.getInstance().flushCache("platform.shopCache", "ShopdescarticleDao.selectByPK~"+Shopdescarticle.ObjectType+":"+vo.getArticleid());
		CacheSynchronizer.getInstance().flushCache("platform.shopCache", "ShopdescarticleDao.selectByLogicPK~"+vo.getShopid()+"~"+vo.getArticletype());
				
		return rows;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Shopdescarticle save(Shopdescarticle record){
    	if(record==null)
    		return null;
		if(record.getArticleid()==null||record.getArticleid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setArticleid(pkValue);
			return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk){
    	if(pk==null)
    		return 0;
    	
    	Shopdescarticle vo = selectByPK(pk);
    	if(vo==null){
    		return 0;
    	}
		int rows = super.delete("Shopdescarticle.deleteByPK", pk);
		
		CacheSynchronizer.getInstance().flushCache("platform.shopCache", "ShopdescarticleDao.selectByPK~"+Shopdescarticle.ObjectType+":"+pk);
		CacheSynchronizer.getInstance().flushCache("platform.shopCache", "ShopdescarticleDao.selectByLogicPK~"+vo.getShopid()+"~"+vo.getArticletype());
				
		return rows;
    }
    
    /**
     * static spring getMethod
     */
     public static ShopdescarticleDao getInstance(){
       	 ShopdescarticleDao dao = (ShopdescarticleDao)BeanFactory.getBeanFactory().getBean("shopdescarticleDao");
         return dao;
     }
    
}
