package platform.shop.dao.impl;

import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;
import org.springframework.cache.annotation.Cacheable;
import platform.bean.BeanFactory;
import platform.daoImpl.ShopDaoImpl;
import platform.shop.dao.ProdcateshopDao;
import platform.shop.vo.Prodcateshop;
import commonTool.base.BaseDao;
import commonTool.cache.CacheSynchronizer;
import commonTool.constant.CommonConstant;

public class ProdcateshopDaoImpl extends BaseDao implements ProdcateshopDao {

	static Logger log = Logger.getLogger(ProdcateshopDaoImpl.class.getName());
	
	private final static String ProdcateshopCacheKey = "prodcateshopCache";
	
    /**
     *
     */
    public ProdcateshopDaoImpl() {
        super();
    }
    
           
    /**
     * select records by queryVO
     */
    @Cacheable(value="platform.shopCache", key="'ProdcateshopDao.selectByShop~'+#shopid+'~'+#localeid")
    public List selectByShop(Long shopid, Long localeid){
		if(shopid==null)
			return new ArrayList();
		Prodcateshop vo = new Prodcateshop();
		vo.setShopid(shopid);
		vo.setLocaleid(localeid);
		List list = this.queryForList("Prodcateshop.selectByVO", vo);
		
		// add cache key into key assoc map
		CacheSynchronizer.getInstance().buildAssoc("platform.shopCache", 
				          "ProdcateshopDao.selectByShop~"+ProdcateshopCacheKey+":"+shopid);
		
		return list;
    }
    
    /**
     * 从shop设置的产品目录中查询下级目录列表
     * @param 
     * @return
     */
    @Cacheable(value="platform.shopCache", 
    		key="'ProdcateshopDao.getChildNodes~'+#pid+'~'+#shopid+'~'+#localeid+'~'+#syscode")
    public List getChildNodes(Long pid, Long shopid, Long localeid, String syscode){
    	if(shopid==null||syscode==null||syscode.trim().length()<1)
    		return null;
    	if(pid==null){
    		pid = CommonConstant.TreeTopnodePid;
    	}
    	Prodcateshop vo = new Prodcateshop();
    	vo.setPid(pid);
    	vo.setShopid(shopid);
    	vo.setSyscode(syscode);
    	vo.setLocaleid(localeid);
		List list = this.queryForList("Prodcateshop.getChildNodes", vo);
		
		// add cache assoic
    	CacheSynchronizer.getInstance().buildAssoc("platform.shopCache", 
					  "ProdcateshopDao.getChildNodes~"+pid+"~"+shopid+"~"+localeid+"~"+syscode, 
					  new String[]{ProdcateshopCacheKey+":"+shopid});
		
		return list;
    }
    
    /**
     * 查询某个目录夹是否已经存在商店的目录夹中了，即判断商店是否已经选择了该商品目录
     * @param 
     * @return true:已经存在，false:不存在
     */
    public boolean existsCate(Long categroyid, Long shopid, String syscode){
    	if(categroyid==null||shopid==null||syscode==null||syscode.trim().length()<1)
    		return true;
    	Prodcateshop vo = new Prodcateshop();
    	vo.setCategoryid(categroyid);
    	vo.setShopid(shopid);
    	vo.setSyscode(syscode);
    	boolean ret = false;
		Object obj = this.queryForObject("Prodcateshop.existsCate", vo);
		if(obj!=null){
			Integer num = (Integer)obj;
			if(num.intValue()>0)
				ret = true;
		}
		return ret;
    }
    
    /**
     * 查询某个目录夹下是否有商店选择的子目录
     * @param 
     * @return true:已经存在，false:不存在
     */
    public boolean existChildNode(Long pid, Long shopid, String syscode){
    	if(pid==null||shopid==null||syscode==null||syscode.trim().length()<1)
    		return true;
    	Prodcateshop vo = new Prodcateshop();
    	vo.setPid(pid);
    	vo.setShopid(shopid);
    	vo.setSyscode(syscode);
    	boolean ret = false;
		Object obj = this.queryForObject("Prodcateshop.existChildNode", vo);
		if(obj!=null){
			Integer num = (Integer)obj;
			if(num.intValue()>0)
				ret = true;
		}
		return ret;
    }
    
    /**
     * 查询某个目录夹下是否有商店的产品
     * @param 
     * @return true:已经存在，false:不存在
     */
    public boolean cateExistProd(Long categoryid, Long shopid, String syscode){
    	if(categoryid==null||shopid==null||syscode==null||syscode.trim().length()<1)
    		return true;
    	Prodcateshop vo = new Prodcateshop();
    	vo.setCategoryid(categoryid);
    	vo.setShopid(shopid);
    	vo.setSyscode(syscode);
    	boolean ret = false;
		Object obj = this.queryForObject("Prodcateshop.cateExistProd", vo);
		if(obj!=null){
			Integer num = (Integer)obj;
			if(num.intValue()>0)
				ret = true;
		}
		return ret;
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Prodcateshop record){
    	if(record==null)
    		return null;
		Long pk = (Long)super.insert("Prodcateshop.insert", record);
		
		// pub flush
		CacheSynchronizer.getInstance().pubFlush("platform.shopCache", ProdcateshopCacheKey, record.getShopid().toString());
		CacheSynchronizer.getInstance().pubFlush("platform.shopCache", ShopDaoImpl.ShopCategoryCacheKey, record.getCategoryid().toString());
		
		return pk;
    }


    /**
     * delete a record by PK
     */
    public int deleteByPK(Long shopid, Long categoryid, String syscode){
    	if(shopid==null||categoryid==null||syscode==null||syscode.trim().length()<1)
    		return 0;
    	Prodcateshop vo = new Prodcateshop();
    	vo.setShopid(shopid);
    	vo.setCategoryid(categoryid);
    	vo.setSyscode(syscode);
		int rows = super.delete("Prodcateshop.deleteByPK", vo);
		
		// pub flush
		CacheSynchronizer.getInstance().pubFlush("platform.shopCache", ProdcateshopCacheKey, shopid.toString());
		CacheSynchronizer.getInstance().pubFlush("platform.shopCache", ShopDaoImpl.ShopCategoryCacheKey, categoryid.toString());
		
		return rows;
    }
    
	/**
     * insertBatch records of List
     */
    public int insertBatch(List<Prodcateshop> list, Long shopid){
    	if(list==null||list.size()<=0||shopid==null)
    		return 0;
    	int rows = 0;
       	rows = super.insertBatch("Prodcateshop.insert", list);
       	
       	// pub flush
		CacheSynchronizer.getInstance().pubFlush("platform.shopCache", ProdcateshopCacheKey, shopid.toString());
		for(Prodcateshop vo : list){
			CacheSynchronizer.getInstance().pubFlush("platform.shopCache", ShopDaoImpl.ShopCategoryCacheKey, vo.getCategoryid().toString());
		}
		       	
       	return rows;
    }
    
   
    /**
     * static spring getMethod
     */
     public static ProdcateshopDao getInstance(){
       	 ProdcateshopDao dao = (ProdcateshopDao)BeanFactory.getBeanFactory().getBean("prodcateshopDao");
         return dao;
     }
    
}
