package platform.user.dao.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import platform.bean.BeanFactory;
import platform.user.dao.UseractivityDao;
import platform.user.dto.UseractivityQuery;
import platform.user.vo.Useractivity;

import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.constant.CommonConstant;

public class UseractivityDaoImpl extends BaseDao implements UseractivityDao {

	static Logger log = Logger.getLogger(UseractivityDaoImpl.class.getName());
	
    /**
     *
     */
    public UseractivityDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Useractivity selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Useractivity record = (Useractivity) this.queryForObject("Useractivity.selectByPK", pk);
		return record;
    }
           
    /**
     * select records by queryVO
     */
    public List selectByVO(UseractivityQuery queryVO){
		if(queryVO==null)
			return new ArrayList();
		List list = this.queryForList("Useractivity.selectByVO", queryVO);
		return list;
    }
    
    /**
     * 查询用户最后一次的activity
     */
    public Useractivity selectLastUserActivity(Long userid, String actiontype)
    {
    	if(userid==null)
    		return null;
    	Useractivity vo = new Useractivity();
    	vo.setUserid(userid);
    	vo.setActiontype(actiontype);
    	vo = (Useractivity)this.queryForObject("Useractivity.selectLastUserActivity", vo);
		return vo;
    }
    
    /**
     * select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    public Page selectByVOPage(UseractivityQuery queryVO,int pageIndex,int pageSize,Integer total){
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        Page page = null;
        String sqlStr = "";
        if(queryVO==null){
        	page = Page.EMPTY_PAGE;
        } else {
        	sqlStr = "Useractivity.selectByVO";
        	page = queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
        }
        return page;
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Useractivity record){
    	if(record==null)
    		return null;
		return (Long)super.insert("Useractivity.insert", record);
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Useractivity record){
    	if(record==null||record.getActivityid()==null)
    		return 0;
		int rows = super.update("Useractivity.updateByPK", record);
		return rows;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Useractivity save(Useractivity record){
    	if(record==null)
    		return null;
		if(record.getActivityid()==null||record.getActivityid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setActivityid(pkValue);
    		return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk){
    	if(pk==null)
    		return 0;
		int rows = super.delete("Useractivity.deleteByPK", pk);
		return rows;
    }
    
    /**
     * static spring getMethod
     */
     public static UseractivityDao getInstance(){
       	 UseractivityDao dao = (UseractivityDao)BeanFactory.getBeanFactory().getBean("useractivityDao");
         return dao;
     }
    
}
