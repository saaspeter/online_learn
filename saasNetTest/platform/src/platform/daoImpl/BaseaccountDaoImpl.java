package platform.daoImpl;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import platform.bean.BeanFactory;
import platform.dao.BaseaccountDao;
import platform.dto.BaseaccountQuery;
import platform.vo.Baseaccount;

import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.constant.CommonConstant;

public class BaseaccountDaoImpl extends BaseDao implements BaseaccountDao {

	static Logger log = Logger.getLogger(BaseaccountDaoImpl.class.getName());
	
    /**
     *
     */
    public BaseaccountDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Baseaccount selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Baseaccount record = (Baseaccount) this.queryForObject("Baseaccount.selectByPK", pk);
		return record;
    }
        
    /**
     * select records by queryVO
     */
    public List selectByVO(BaseaccountQuery queryVO)  {
		if(queryVO==null)
			return new ArrayList();
		List list = this.queryForList("Baseaccount.selectByVO", queryVO);
		return list;
    }
    
    /**
     * select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @
     */
    public Page selectByVOPage(BaseaccountQuery queryVO,int pageIndex,int pageSize,Integer total)  {
    	if(queryVO==null)
    		return Page.EMPTY_PAGE;
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        return queryForPage("Baseaccount.selectByVO", queryVO, pageIndex, pageSize, total);
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Baseaccount record)  {
    	if(record==null)
    		return null;
		return (Long)super.insert("Baseaccount.insert", record);
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Baseaccount record)  {
    	if(record==null||record.getBaseaccountid()==null)
    		return 0;
		int rows = super.update("Baseaccount.updateByPK", record);
		return rows;
    }
    
    /**
     * 更新帐户的状态
     * @param pk
     * @return
     */
    public boolean updateStatus(Long pk,Short status) {
    	if(pk==null||status==null)
    		return false;
    	Baseaccount vo = new Baseaccount();
    	vo.setBaseaccountid(pk);
    	vo.setStatus(status);
		int rows = super.update("Baseaccount.updateStatus", vo);
		if(rows==1)
			return true;
		else
			return false;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @
     */
    public Baseaccount save(Baseaccount record)  {
    	if(record==null)
    		return null;
		if(record.getBaseaccountid()==null||record.getBaseaccountid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setBaseaccountid(pkValue);
			return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk)  {
    	if(pk==null)
    		return 0;
		int rows = super.delete("Baseaccount.deleteByPK", pk);
		return rows;
    }
    
    /**
     * 根据用户userID删除记录
     * @param userID
     * @return
     * @
     */
    public int delByUserID(Long userID) {
    	if(userID==null)
    		return 0;
		int rows = super.delete("Baseaccount.delByUserID", userID);
		return rows;
    }
    
    /**
     * delete records by queryVO
     */
    public int deleteByVO(BaseaccountQuery queryVO)  {
    	if(queryVO==null)
    		return 0;
		int rows = super.delete("Baseaccount.deleteByVO",queryVO);
		return rows;
    }
    
	/**
     * insertBatch records of List
     */
    public int insertBatch(List list)  {
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = super.insertBatch("Baseaccount.insert", list);
        return rows;
    }
    
    /**
     * updateBatch records of List
     */
    public int updateBatch(List list)  {
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = super.updateBatch("Baseaccount.updateByPK", list);
        return rows;
    }
    
    /**
     * deleteBatch records by the Long Array of PK
     */
    public int deleteBatchByPK(Long[] pkArray)  {
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = super.deleteBatch("Baseaccount.deleteByPK", pkArray);
       	return rows;
    }
    
    /**
     * deleteBatch records by the String Array of PK
     */
    public int deleteBatchByPK(String[] pkArray)  {
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	Long[] arrs = new Long[pkArray.length];
		for(int i=0;i<pkArray.length;i++){
			if(pkArray[i]!=null)
				arrs[i] = new Long(Long.parseLong(pkArray[i]));
		}
		int rows = this.deleteBatchByPK(arrs);
		return rows;    	
    }
    
    /**
     * static spring getMethod
     */
     public static BaseaccountDao getInstance() {
       	 BaseaccountDao dao = (BaseaccountDao)BeanFactory.getBeanFactory().getBean("baseaccountDaoProxy");
         return dao;
     }
         
}
