package platform.daoImpl;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.cache.annotation.Cacheable;

import platform.bean.BeanFactory;
import platform.dao.NewscategoryDao;
import platform.exception.ExceptionConstant;
import platform.social.dao.SocialNewsSourceDao;
import platform.vo.Newscategory;

import commonTool.base.BaseDao;
import commonTool.cache.CacheSynchronizer;
import commonTool.exception.HasReferenceException;
import commonTool.exception.NeedParamsException;

public class NewscategoryDaoImpl extends BaseDao implements NewscategoryDao {

	static Logger log = Logger.getLogger(NewscategoryDaoImpl.class.getName());
	
	public final static String CateForNewsType = "CateForNewsCache";
	
	private SocialNewsSourceDao socialNewsSourceDao;
	
    /**
     *
     */
    public NewscategoryDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    @Cacheable(value="platform.categoryCache", key="'Newscategory.selectByPK~'+#pk", unless="#result==null")
    public Newscategory selectByPK(Long pk){
    	if(pk==null)
    		return null;
    	Newscategory vo = (Newscategory) this.queryForObject("Newscategory.selectByPK", pk);
    	if(vo!=null){
    		CacheSynchronizer.getInstance().buildAssoc("platform.categoryCache", 
    				"Newscategory.selectByPK~"+pk, new String[]{Newscategory.ObjectType+":"+pk});
    	}
    	return vo;
	}
    
    private Newscategory selectByValuePK(Long valueid){
    	if(valueid==null)
    		return null;
    	return (Newscategory) this.queryForObject("Newscategory.selectByValuePK", valueid);
    }
    
    /**
     * select some record by PK
     */
    @Cacheable(value="platform.categoryCache", key="'Newscategory.selectByLogicPK~'+#pk+'~'+#localeid", unless="#result==null")
    public Newscategory selectByLogicPK(Long pk, Long localeid){
    	if(pk==null || localeid==null)
    		return null;
    	Newscategory vo = new Newscategory();
    	vo.setId(pk);
    	vo.setLocaleid(localeid);
		Newscategory record = (Newscategory) this.queryForObject("Newscategory.selectByLogicPK", vo);
		if(record!=null){
		   CacheSynchronizer.getInstance().buildAssoc("platform.categoryCache", 
				"Newscategory.selectByLogicPK~"+pk+"~"+localeid, new String[]{Newscategory.ObjectType+":"+pk});
		}
		return record;
    }
    
    /**
     * 查询需要显示的标签
     * @param categoryid
     * @param module
     * @param localeid
     * @return
     */
    @Cacheable(value="platform.categoryCache", key="'Newscategory.selectCateTab~'+#categoryid+'~'+#localeid")
    public List<Newscategory> selectCateTab(Long categoryid, Long localeid){
    	if(categoryid==null||localeid==null)
    		return new ArrayList<Newscategory>();
    	Newscategory vo = new Newscategory();
    	vo.setCategoryid(categoryid);
    	vo.setLocaleid(localeid);
    	List<Newscategory> list = (List<Newscategory>)this.queryForList("Newscategory.selectByVO", vo);
    	if(list==null){
    		list = new ArrayList<Newscategory>();
    	}
    	//
    	CacheSynchronizer.getInstance().buildAssoc("platform.categoryCache", 
 				"Newscategory.selectCateTab~"+categoryid+"~"+localeid, new String[]{CateForNewsType+":"+categoryid});
 		
		return list;
    }
    
    /**
     * 查询某个标签对应的不同语言国家的值
     * @param categoryid
     * @param module
     * @param localeid
     * @return
     */
    @Cacheable(value="platform.categoryCache", key="'Newscategory.selectTabLocale~'+#newscategoryid")
    public List<Newscategory> selectTabLocale(Long newscategoryid){
    	if(newscategoryid==null)
    		return new ArrayList<Newscategory>();
    	Newscategory vo = new Newscategory();
    	vo.setId(newscategoryid);
    	List<Newscategory> list = (List<Newscategory>)this.queryForList("Newscategory.selectByVO", vo);
    	if(list==null){
    		list = new ArrayList<Newscategory>();
    	}
    	//
    	CacheSynchronizer.getInstance().buildAssoc("platform.categoryCache", 
				"Newscategory.selectTabLocale~"+newscategoryid, new String[]{Newscategory.ObjectType+":"+newscategoryid});
		return list;
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Newscategory insert(Newscategory record){
    	if(record==null||record.getCategoryid()==null)
    		return null;
    	Long pk = record.getId();
    	if(pk==null){
    		pk = (Long)super.insert("Newscategory.insert", record);
    		record.setId(pk);
    	}
    	Long valueid = (Long)super.insert("Newscategory.insertNewsCategoryValue", record);
    	record.setValueid(valueid);
    	// flush cache
    	CacheSynchronizer.getInstance().pubFlush("platform.categoryCache", Newscategory.ObjectType, pk.toString());
    	CacheSynchronizer.getInstance().pubFlush("platform.categoryCache", CateForNewsType, record.getCategoryid().toString());
		
		return record;
    }

    /**
     * update a record By PK
     */
    public void updateByPK(Newscategory vo){
    	if(vo==null||vo.getId()==null)
    		return;
		super.update("Newscategory.updateByPK", vo);
		// flush cache
		CacheSynchronizer.getInstance().pubFlush("platform.categoryCache", Newscategory.ObjectType, vo.getId().toString());
		Long categoryid = vo.getCategoryid();
		if(categoryid==null){
			Newscategory dbvo = selectByPK(vo.getId());
			categoryid = dbvo.getCategoryid();
		}
    	CacheSynchronizer.getInstance().pubFlush("platform.categoryCache", CateForNewsType, categoryid.toString());
    }
    
    public Long saveNewsCateValue(Newscategory vo){
    	if(vo==null)
    		return -1l;
    	if(vo.getValueid()==null){
    		Long valueid = (Long)super.insert("Newscategory.insertNewsCategoryValue", vo);
    		vo.setValueid(valueid);
    	}else {
    		super.update("Newscategory.updateNewsCategoryValueByPK", vo);
    	}
    	// flush cache
    	Newscategory dbvo = selectByValuePK(vo.getValueid());
    	CacheSynchronizer.getInstance().pubFlush("platform.categoryCache", Newscategory.ObjectType, dbvo.getId().toString());
    	CacheSynchronizer.getInstance().pubFlush("platform.categoryCache", CateForNewsType, dbvo.getCategoryid().toString());
    	
		return vo.getValueid();
    }
    
    /**
     * 删除一个tab页，包括其下各国语言的tab
     * @param pk: 要删除的tab的pk值
     * @return 
     */
    public void delOneTab(Long newscategoryid){
    	if(newscategoryid==null)
    		return;
    	int nums = countByArticle(newscategoryid);
    	if(nums>0){
    		throw new HasReferenceException(ExceptionConstant.Error_Record_BeenReference);
    	}
    	Newscategory dbvo = selectByPK(newscategoryid);
    	
    	socialNewsSourceDao.deleteByCategory(newscategoryid);
    	super.delete("Newscategory.deleteValueByNewsCategoryID", newscategoryid);
    	super.delete("Newscategory.deleteByPK", newscategoryid);
    	
    	// flush cache
    	CacheSynchronizer.getInstance().pubFlush("platform.categoryCache", Newscategory.ObjectType, dbvo.getId().toString());
    	CacheSynchronizer.getInstance().pubFlush("platform.categoryCache", CateForNewsType, dbvo.getCategoryid().toString());
    }
    
    /**
     * 删除一个目录的value记录，即一种语言的目录记录
     * @param valueid
     */
    public void delOneTabLocale(Long valueid){
    	if(valueid!=null){
    		Newscategory dbvo = selectByValuePK(valueid);
    		if(dbvo!=null){
    			super.delete("Newscategory.delValueByPK", valueid);
    			// flush cache
    			CacheSynchronizer.getInstance().pubFlush("platform.categoryCache", Newscategory.ObjectType, dbvo.getId().toString());
    			CacheSynchronizer.getInstance().pubFlush("platform.categoryCache", CateForNewsType, dbvo.getCategoryid().toString());
    		}
    	}
    }
    
    /**
     * 查看一个tab下存在的文章的数目
     * @param categoryid
     * @param moduleno
     * @param value
     * @param localeid: 如果不填写，则查询该tab下所有语言的文章个数
     * @return
     */
    private int countByArticle(Long newscategoryid){
    	if(newscategoryid==null)
			throw new NeedParamsException("newscategoryid is null");
		int retvalue = 0;
		Integer ret = (Integer)this.queryForObject("Newscategory.countArticle", newscategoryid);
		if(ret!=null)
			retvalue = ret;
		return retvalue;
    }
    
    public SocialNewsSourceDao getSocialNewsSourceDao() {
		return socialNewsSourceDao;
	}

	public void setSocialNewsSourceDao(SocialNewsSourceDao socialNewsSourceDao) {
		this.socialNewsSourceDao = socialNewsSourceDao;
	}

	/**
     * static spring getMethod
     */
     public static NewscategoryDao getInstance(){
       	 NewscategoryDao dao = (NewscategoryDao)BeanFactory.getBeanFactory().getBean("newscategoryDao");
         return dao;
     }
    
}
