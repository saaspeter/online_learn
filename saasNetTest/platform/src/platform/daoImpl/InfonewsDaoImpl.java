package platform.daoImpl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.cache.annotation.Cacheable;

import platform.bean.BeanFactory;
import platform.dao.InfonewsDao;
import platform.dto.InfonewsQuery;
import platform.vo.Infonews;

import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.cache.CacheSynchronizer;
import commonTool.constant.CommonConstant;
import commonTool.util.StringUtil;

public class InfonewsDaoImpl extends BaseDao implements InfonewsDao {

	static Logger log = Logger.getLogger(InfonewsDaoImpl.class.getName());
	
	public static final String InfonewsTabType = "infotabtype";
	
    /**
     *
     */
    public InfonewsDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    @Cacheable(value="platform.infonewsCache", key="'Infonews.selectByPK~infonews:'+#pk", unless="#result==null")
    public Infonews selectByPK(Long pk){
    	if(pk==null)
    		return null;
    	Infonews record = (Infonews) this.queryForObject("Infonews.selectByPK", pk);
    	
    	// add cache key into key assoc map
		CacheSynchronizer.getInstance().buildAssoc("platform.infonewsCache", "Infonews.selectByPK~"+Infonews.ObjectType+":"+pk);
		
		return record;
    }
           
    /**
     * select records by refID
     */
//    public List selectByRefID(Long refid, Short status){
//		if(refid==null)
//			return new ArrayList();
//		if(status==null)
//			status = CommonConstant.Status_valide;
//		InfonewsQuery queryVO = new InfonewsQuery();
//		queryVO.setRefid(refid);
//		queryVO.setStatus(status);
//		List list = this.queryForList("Infonews.selectByRefID", queryVO);
//		return list;
//    }
    
    /**
     * select page by refID 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    
//    public Page selectByRefIDPage(Long refid, Short status,int pageIndex,int pageSize,Integer total){
//    	if(refid==null)
//			return Page.EMPTY_PAGE;;
//    	if(status==null)
//			status = CommonConstant.Status_valide;
//        if(pageIndex<=0)
//        	pageIndex = 1;
//        if(pageSize<=0)
//        	pageSize = CommonConstant.PAGESIZE;
//        String sqlStr = "Infonews.selectByRefID";
//        InfonewsQuery queryVO = new InfonewsQuery();
//        queryVO.setRefid(refid);
//		queryVO.setStatus(status);
//		Page page = queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
//        
//        return page;
//    }
    
    /**
     * 搜索新闻
     * @param categoryid: 目录id
     * @param localeid
     * @param content 搜索内容，目前仅支持新闻标题搜索
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     */
    @Cacheable(value="platform.infonewsCache", 
    		key="'Infonews.selectResult~infotabtype:'+#refid+'~'+#categoryid+'~'+#localeid+'~'+#pageIndex+'~'+#pageSize", 
    		       condition="#content==null or #content==''")
    public Page selectResult(Long refid, Long categoryid, Long localeid, String content, int pageIndex, int pageSize,Integer total){
    	if(categoryid==null&&refid==null)
			return Page.EMPTY_PAGE;;
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        content = StringUtil.filterSpecCharForSql(content, 1);
        String sqlStr = "Infonews.search";
        InfonewsQuery queryVO = new InfonewsQuery();
        queryVO.setRefid(refid);
        queryVO.setLocaleid(localeid);
		queryVO.setCategoryid(categoryid);
		queryVO.setSearchcontent(content);
		
		Page page = queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
		
        // add cache key into key assoc map
		if(content==null || content.trim().length()<1){
		    CacheSynchronizer.getInstance().buildAssoc("platform.infonewsCache", 
		    			"Infonews.selectResult~"+InfonewsTabType+":"+refid+"~"
		    			+categoryid+"~"+localeid+"~"+pageIndex+"~"+pageSize);
		}
        return page;
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Infonews record){
    	if(record==null)
    		return null;
		Long pk = (Long)super.insert("Infonews.insert", record);
		record.setId(pk);
		super.insert("Infonews.insertText", record);
		
		// flush page cache
		CacheSynchronizer.getInstance().pubFlush("platform.infonewsCache", Infonews.ObjectType, record.getId().toString());
		CacheSynchronizer.getInstance().pubFlush("platform.infonewsCache", InfonewsTabType, record.getRefid().toString());
		
		return pk;
    }

    /**
     * update a record By PK
     */
    //@Caching(evict={@CacheEvict(value="platform.infonewsCache", key="'Infonews.selectByPK~'+#record.id")})
    public int updateByPK(Infonews record){
    	if(record==null||record.getId()==null)
    		return 0;
		int rows = super.update("Infonews.updateByPK", record);
		super.update("Infonews.updateTextByPK", record);
		
		// flush selectResult page cache
		if(record.getRefid()==null){
			record = InfonewsDaoImpl.getInstance().selectByPK(record.getId());
		}
		CacheSynchronizer.getInstance().pubFlush("platform.infonewsCache", Infonews.ObjectType, record.getId().toString());
		CacheSynchronizer.getInstance().pubFlush("platform.infonewsCache", InfonewsTabType, record.getRefid().toString());
		
		return rows;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Infonews save(Infonews record){
    	if(record==null)
    		return null;
		if(record.getId()==null||record.getId().intValue()==0){
			Long pkValue = this.insert(record);
			record.setId(pkValue);
    		return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }
    
    /**
     * 查询超过给定时间的数据，主要是为清理脏数据使用
     * 仅仅返回前600条数据，需要反复调用处理
     */
    public List<Long> selectLongTimeData(Date date, Short status){
		if(date==null || status==null)
			return new ArrayList<Long>();
		InfonewsQuery queryVO = new InfonewsQuery();
		queryVO.setCreatetime(date);
		queryVO.setStatus(status);
		List<Long> list = this.queryForList("Infonews.selectLongTimeData", queryVO);
		return list;
    }
    
    /**
     * delete a record by PK
     */
    //@Caching(evict={@CacheEvict(value="platform.infonewsCache", key="'Infonews.selectByPK~'+#pk")})
    public int deleteByPK(Long pk){
    	if(pk==null){
    		return 0;
    	}
    	Infonews record = InfonewsDaoImpl.getInstance().selectByPK(pk);
    	if(record==null){
    		return 0;
    	}
    	
    	super.delete("Infonews.deleteTextByPK", pk);
		int rows = super.delete("Infonews.deleteByPK", pk);
		
		// flush selectResult page cache
		CacheSynchronizer.getInstance().pubFlush("platform.infonewsCache", Infonews.ObjectType, record.getId().toString());
		CacheSynchronizer.getInstance().pubFlush("platform.infonewsCache", InfonewsTabType, record.getRefid().toString());
		return rows;
    }
       
    /**
     * deleteBatch records by the String Array of PK
     */
//    public int deleteBatchByPK(String[] pkArray){
//    	if(pkArray==null||pkArray.length<=0)
//    		return 0;
//    	int rows = 0;
//    	Long[] arrs = new Long[pkArray.length];
//		for(int i=0;i<pkArray.length;i++){
//			if(pkArray[i]!=null)
//				arrs[i] = new Long(Long.parseLong(pkArray[i]));
//		}
//		String[] sqlArr = new String[]{"Infonews.deleteTextByPK", "Infonews.deleteByPK"};
//		super.deleteBatchMutiTable(sqlArr, arrs);
//		rows = pkArray.length;
//		return rows;
//    }
    
    /**
     * deleteBatch records by the Long Array of PK
     */
    public int deleteBatchByPK(Long[] pkArray){
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
    	String[] sqlArr = new String[]{"Infonews.deleteTextByPK", "Infonews.deleteByPK"};
		super.deleteBatchMutiTable(sqlArr, pkArray);
		rows = pkArray.length;
		return rows;
    }
    
    /**
     * static spring getMethod
     */
     public static InfonewsDao getInstance(){
       	 InfonewsDao dao = (InfonewsDao)BeanFactory.getBeanFactory().getBean("infonewsDao");
         return dao;
     }
    
}
