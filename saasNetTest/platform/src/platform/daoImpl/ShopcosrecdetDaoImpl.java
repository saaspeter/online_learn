package platform.daoImpl;

import java.util.List;
import org.apache.log4j.Logger;
import commonTool.base.BaseDao;
import commonTool.base.Page;
import platform.dao.ShopcosrecdetDao;
import commonTool.constant.CommonConstant;
import platform.vo.Shopcosrecdet;
import platform.dto.ShopcosrecdetQuery;
import platform.bean.BeanFactory;

public class ShopcosrecdetDaoImpl extends BaseDao implements ShopcosrecdetDao {

	static Logger log = Logger.getLogger(ShopcosrecdetDaoImpl.class.getName());
	
    /**
     *
     */
    public ShopcosrecdetDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Shopcosrecdet selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Shopcosrecdet record = (Shopcosrecdet) this.queryForObject("Shopcosrecdet.selectByPK", pk);
		return record;
    }
    
    /**
     * select all records
     * @return
     */
    public List selectAll() throws Exception {
    	try {
			List list = this.queryForList("Shopcosrecdet.selectAll", null);
			return list;
		} catch (Exception e) {
			log.error("ShopcosrecdetDaoImpl的selectAll时出错误!", e);
			throw e ;
		}
    }
        
    /**
     * select records by queryVO
     */
    public List selectByVO(ShopcosrecdetQuery queryVO) throws Exception {
        try {
			if(queryVO==null)
				return selectAll();
			List list = this.queryForList("Shopcosrecdet.selectByVO", queryVO);
			return list;
        } catch (Exception e) {
			log.error("ShopcosrecdetDaoImpl的selectByVO时出错误!", e);
			throw e ;
		}
    }
    
    /**
     * select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    public Page selectByVOPage(ShopcosrecdetQuery queryVO,int pageIndex,int pageSize,Integer total) throws Exception {
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        String sqlStr = "";
        if(queryVO==null)
        	sqlStr = "Shopcosrecdet.selectAll";
        else 
        	sqlStr = "Shopcosrecdet.selectByVO";
        try{
	        return queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
        }catch(Exception e) {
            log.error("ShopcosrecdetDaoImpl分页查询selectByVOPage时出错误!", e);
			throw e ;
        }
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Shopcosrecdet record) throws Exception {
    	if(record==null)
    		return null;
        try {
			return (Long)super.insert("Shopcosrecdet.insert", record);
        }catch(Exception e) {
            log.error("ShopcosrecdetDaoImpl插入insert时出错误!", e);
			throw e ;
        }
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Shopcosrecdet record) throws Exception {
    	if(record==null||record.getShopcosrecdetid()==null)
    		return 0;
        try {
			int rows = super.update("Shopcosrecdet.updateByPK", record);
			return rows;
        }catch(Exception e) {
            log.error("ShopcosrecdetDaoImpl更新updateByPK时出错误!", e);
			throw e ;
        }
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Shopcosrecdet save(Shopcosrecdet record) throws Exception {
    	if(record==null)
    		return null;
    	try {
			if(record.getShopcosrecdetid()==null||record.getShopcosrecdetid().intValue()==0){
				Long pkValue = this.insert(record);
				record.setShopcosrecdetid(pkValue);
				return record;
			}else{
				this.updateByPK(record);
				return record;
			}
		} catch (RuntimeException e) {
			log.error("ShopcosrecdetDaoImpl保存save时出错误!", e);
			throw e ;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk) throws Exception {
    	if(pk==null)
    		return 0;
        try {
			int rows = super.delete("Shopcosrecdet.deleteByPK", pk);
			return rows;
        }catch(Exception e) {
            log.error("ShopcosrecdetDaoImpl删除deleteByPK时出错误!", e);
			throw e ;
        }
    }
    
    /**
     * 根据shopID删除记录
     * @param shopID
     * @return
     * @throws Exception
     */
    public int delByShopID(Long shopID) throws Exception{
    	if(shopID==null)
    		return 0;
        try {
			int rows = super.delete("Shopcosrecdet.delByShopID", shopID);
			return rows;
        }catch(Exception e) {
            log.error("ShopcosrecdetDaoImpl删除delByShopID时出错误!", e);
			throw e ;
        }
    }
    
    /**
     * 根据帐户ID删除记录
     * @param baseaccountid
     * @return
     * @throws Exception
     */
    public int delByAccountID(Long baseaccountid) throws Exception{
    	if(baseaccountid==null)
    		return 0;
        try {
			int rows = super.delete("Shopcosrecdet.delByAccountID", baseaccountid);
			return rows;
        }catch(Exception e) {
            log.error("ShopcosrecdetDaoImpl删除delByAccountID时出错误!", e);
			throw e ;
        }
    }
    
    /**
     * delete records by queryVO
     */
    public int deleteByVO(ShopcosrecdetQuery queryVO) throws Exception {
    	if(queryVO==null)
    		return 0;
        try {
			int rows = super.delete("Shopcosrecdet.deleteByVO",queryVO);
			return rows;
        }catch(Exception e) {
            log.error("ShopcosrecdetDaoImpl删除deleteByVO时出错误!", e);
			throw e ;
        }
    }
    
	/**
     * insertBatch records of List
     */
    public int insertBatch(List list) throws Exception {
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
        try {
        	rows = super.insertBatch("Shopcosrecdet.insert", list);
        	return rows;
        }catch(Exception e) {
            log.error("ShopcosrecdetDaoImpl批量新增insertBatch(List list)时出错误!", e);
			throw e ;
        }
    }
    
    /**
     * updateBatch records of List
     */
    public int updateBatch(List list) throws Exception {
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
        try {
        	rows = super.updateBatch("Shopcosrecdet.updateByPK", list);
        	return rows;
        }catch(Exception e) {
            log.error("ShopcosrecdetDaoImpl批量修改updateBatch(List list)时出错误!", e);
			throw e ;
        }
    }
    
    /**
     * deleteBatch records by the Long Array of PK
     */
    public int deleteBatchByPK(Long[] pkArray) throws Exception {
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
        try {
        	rows = super.deleteBatch("Shopcosrecdet.deleteByPK", pkArray);
        	return rows;
        }catch(Exception e) {
            log.error("ShopcosrecdetDaoImpl删除deleteBatchByPK(Long[] pkArray)时出错误!", e);
			throw e ;
        }
    }
    
    /**
     * deleteBatch records by the String Array of PK
     */
    public int deleteBatchByPK(String[] pkArray) throws Exception {
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
    	Long[] arrs = new Long[pkArray.length];
    	try {
			for(int i=0;i<pkArray.length;i++){
				if(pkArray[i]!=null)
					arrs[i] = new Long(Long.parseLong(pkArray[i]));
			}
			rows = this.deleteBatchByPK(arrs);
			return rows;
		} catch (NumberFormatException e) {
			log.error("ShopcosrecdetDaoImpl删除deleteBatchByPK(String[] pkArray)时出现转换错�?!", e);
			throw new Exception("NumberFormatException：from String to Long!") ;
		}catch(Exception e) {
            log.error("ShopcosrecdetDaoImpl删除deleteBatchByPK(String[] pkArray)时出错误!", e);
			throw e ;
        }
    	
    }
    
    /**
     * static spring getMethod
     */
     public static ShopcosrecdetDao getInstance() {
       	 ShopcosrecdetDao dao = (ShopcosrecdetDao)BeanFactory.getBeanFactory().getBean("shopcosrecdetDao");
         return dao;
     }
    
}
