package platform.daoImpl;

import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;
import commonTool.base.BaseDao;
import commonTool.base.Page;
import platform.dao.SysproductcateDao;
import commonTool.constant.CommonConstant;
import commonTool.util.StringUtil;
import platform.vo.Sysproductcate;
import platform.dto.SysproductcateQuery;
import platform.bean.BeanFactory;

public class SysproductcateDaoImpl extends BaseDao implements SysproductcateDao {

	static Logger log = Logger.getLogger(SysproductcateDaoImpl.class.getName());
	
    /**
     *
     */
    public SysproductcateDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Sysproductcate selectByPK(Long categoryid,String syscode){
    	if(categoryid==null||syscode==null||syscode.trim().length()>0)
    		return null;
    	Sysproductcate vo = new Sysproductcate();
    	vo.setCategoryid(categoryid);
    	vo.setSyscode(syscode);
		Sysproductcate record = (Sysproductcate) this.queryForObject("Sysproductcate.selectByPK", vo);
		return record;
    }
    
    /**
     * select all records
     * @return
     */
    public List selectAll(){
		List list = this.queryForList("Sysproductcate.selectAll", null);
		return list;
    }
        
    /**
     * select records by queryVO
     */
    public List selectByVO(SysproductcateQuery queryVO){
		if(queryVO==null)
			return selectAll();
		List list = this.queryForList("Sysproductcate.selectByVO", queryVO);
		return list;
    }
    
    /**
     * select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    public Page selectByVOPage(SysproductcateQuery queryVO,int pageIndex,int pageSize,Integer total){
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        String sqlStr = "";
        if(queryVO==null)
        	sqlStr = "Sysproductcate.selectAll";
        else 
        	sqlStr = "Sysproductcate.selectByVO";
        return queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Sysproductcate record){
    	if(record==null)
    		return null;
		return (Long)super.insert("Sysproductcate.insert", record);
    }
    
    /**
     * 根据目录id和系统编码串添加系统目录
     * @param categoryid
     * @param syscodesStr
     * @return: 新增记录的条数
     */
    public int insert(Long categoryid,String syscodesStr){
    	if(categoryid==null||syscodesStr==null||syscodesStr.trim().length()<1)
    		return 0;
    	int rtn = 0;
    	String[] arr = StringUtil.splitString(syscodesStr, ",");
    	if(arr!=null&&arr.length>0){
    		List list = new ArrayList();
    		for(int i=0;i<arr.length;i++){
    		   Sysproductcate vo = new Sysproductcate();
    		   vo.setCategoryid(categoryid);
    		   vo.setSyscode(arr[i]);
    		   list.add(vo);
    		}
    		rtn = this.insertBatch(list);
    	}
    	return rtn;
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long categoryid,String syscode){
    	if(categoryid==null||syscode==null||syscode.trim().length()<1)
    		return 0;
    	Sysproductcate vo = new Sysproductcate();
    	vo.setCategoryid(categoryid);
    	vo.setSyscode(syscode);
		int rows = super.delete("Sysproductcate.deleteByPK", vo);
		return rows;
    }
    
    /**
     * delete a record by PK
     */
    public int deleteBatchByPK(Long categoryid,String[] syscodeArr){
    	if(categoryid==null||syscodeArr==null||syscodeArr.length<1)
    		return 0;
    	for(int i=0;i<syscodeArr.length;i++){
    		this.deleteByPK(categoryid, syscodeArr[i]);
    	}
		int rows = syscodeArr.length;
		return rows;
    }
    
    /**
     * delete a record by category
     */
    public int deleteByCate(Long categoryid){
    	if(categoryid==null)
    		return 0;
		int rows = super.delete("Sysproductcate.deleteByCate", categoryid);
		return rows;
    }
    
	/**
     * insertBatch records of List
     */
    public int insertBatch(List list){
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
       	rows = super.insertBatch("Sysproductcate.insert", list);
       	return rows;
    }
               
    /**
     * static spring getMethod
     */
     public static SysproductcateDao getInstance(){
       	 SysproductcateDao dao = (SysproductcateDao)BeanFactory.getBeanFactory().getBean("sysproductcateDao");
         return dao;
     }
    
}
