package platform.daoImpl;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import platform.bean.BeanFactory;
import platform.dao.ShopvalueDao;
import platform.dto.ShopvalueQuery;
import platform.vo.Shopvalue;

import commonTool.base.BaseDao;

public class ShopvalueDaoImpl extends BaseDao implements ShopvalueDao {

	static Logger log = Logger.getLogger(ShopvalueDaoImpl.class.getName());
	
    /**
     *
     */
    public ShopvalueDaoImpl() {
        super();
    }
    
    /**
     * 检查是否有重名的商店
     * @return true:有重名商店, false:没有重名商店
     */
    public boolean existcheckByname(String shopname) {
    	if(shopname==null||shopname.trim().length()<1)
    		return false;
    	shopname = shopname.trim();
    	Integer ret = (Integer) this.queryForObject("Shopvalue.existcheckByname", shopname);
       	if(ret!=null && ret==1)
		   return true;
       	else
       	   return false;
    }
    
    /**
     * select some record by PK
     */
    public Shopvalue selectByPK(Long pk, Long localeid) throws Exception {
    	if(pk==null)
    		return null;
    	Shopvalue record = null;
    	if(localeid==null){
    	   List list = this.queryForList("Shopvalue.selectByShopID", pk);
    	   if(list!=null && list.size()>0){
    		   record = (Shopvalue)list.get(0);
    	   }
    	}else {
    	   Shopvalue vo = new Shopvalue();
    	   vo.setShopid(pk);
    	   vo.setLocaleid(localeid);
		   record = (Shopvalue) this.queryForObject("Shopvalue.selectByLogicPK", vo);
    	}
		return record;
    }
        
    /**
     * select records by queryVO
     */
    public List selectByVO(ShopvalueQuery queryVO) throws Exception {
        try {
			if(queryVO==null)
				return new ArrayList();
			List list = this.queryForList("Shopvalue.selectByVO", queryVO);
			return list;
        } catch (Exception e) {
			log.error("ShopvalueDaoImpl的selectByVO时出错误!", e);
			throw e ;
		}
    }
    
    /**
     * select records withoutBlobs by queryVO
     */
    public List selectByVOWithoutBLOBs(ShopvalueQuery queryVO) throws Exception{
    	try {
			if(queryVO==null)
				return new ArrayList();
			List list = this.queryForList("Shopvalue.selectByVOWithoutBLOBs", queryVO);
			return list;
    	}catch(Exception e) {
            log.error("ShopvalueDaoImpl的selectByVOWithoutBLOBs时出错误!", e);
			throw e ;
        }
    }

    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Shopvalue record) throws Exception {
    	if(record==null)
    		return null;
		return (Long)super.insert("Shopvalue.insert", record);
    }

    /**
     * update a record By PK
     */
    public int updateShopnameByPK(Shopvalue record) throws Exception {
    	if(record==null||record.getShopvalueid()==null)
    		return 0;
		int rows = super.update("Shopvalue.updateShopnameByPK", record);
		return rows;
    }
    
    /**
     * update a record By PK
     */
    public int updateShopDescByPK(Shopvalue record) throws Exception {
    	if(record==null||record.getShopvalueid()==null)
    		return 0;
		int rows = super.update("Shopvalue.updateShopDescByPK", record);
		return rows;
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk) throws Exception {
    	if(pk==null)
    		return 0;
        try {
			int rows = super.delete("Shopvalue.deleteByPK", pk);
			return rows;
        }catch(Exception e) {
            log.error("ShopvalueDaoImpl删除deleteByPK时出错误!", e);
			throw e ;
        }
    }
    
    /**
     * delete records by queryVO
     */
    public int deleteByVO(ShopvalueQuery queryVO) throws Exception {
    	if(queryVO==null)
    		return 0;
        try {
			int rows = super.delete("Shopvalue.deleteByVO",queryVO);
			return rows;
        }catch(Exception e) {
            log.error("ShopvalueDaoImpl删除deleteByVO时出错误!", e);
			throw e ;
        }
    }

	/**
     * insertBatch records of List
     */
    public int insertBatch(List list) throws Exception {
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
        try {
        	rows = super.insertBatch("Shopvalue.insert", list);
        	return rows;
        }catch(Exception e) {
            log.error("ShopvalueDaoImpl批量新增insertBatch(List list)时出错误!", e);
			throw e ;
        }
    }
    
    /**
     * updateBatch records of List
     */
    public int updateBatch(List list) throws Exception {
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
        try {
        	rows = super.updateBatch("Shopvalue.updateByPK", list);
        	return rows;
        }catch(Exception e) {
            log.error("ShopvalueDaoImpl批量修改updateBatch(List list)时出错误!", e);
			throw e ;
        }
    }
    
    /**
     * deleteBatch records by the Long Array of PK
     */
    public int deleteBatchByPK(Long[] pkArray) throws Exception {
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
        try {
        	rows = super.deleteBatch("Shopvalue.deleteByPK", pkArray);
        	return rows;
        }catch(Exception e) {
            log.error("ShopvalueDaoImpl删除deleteBatchByPK(Long[] pkArray)时出错误!", e);
			throw e ;
        }
    }
    
    /**
     * deleteBatch records by the String Array of PK
     */
    public int deleteBatchByPK(String[] pkArray) throws Exception {
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
    	Long[] arrs = new Long[pkArray.length];
    	try {
			for(int i=0;i<pkArray.length;i++){
				if(pkArray[i]!=null)
					arrs[i] = new Long(Long.parseLong(pkArray[i]));
			}
			rows = this.deleteBatchByPK(arrs);
			return rows;
		} catch (NumberFormatException e) {
			log.error("ShopvalueDaoImpl删除deleteBatchByPK(String[] pkArray)时出现转换错�?!", e);
			throw new Exception("NumberFormatException：from String to Long!") ;
		}catch(Exception e) {
            log.error("ShopvalueDaoImpl删除deleteBatchByPK(String[] pkArray)时出错误!", e);
			throw e ;
        }
    	
    }
    
    /**
     * static spring getMethod
     */
     public static ShopvalueDao getInstance() {
      	 ShopvalueDao dao = (ShopvalueDao)BeanFactory.getBeanFactory().getBean("shopvalueDaoProxy");
         return dao;
     }

	public Shopvalue selectByPK(Long pk) {
		if(pk==null)
			return null;
		Shopvalue record = (Shopvalue) this.queryForObject("Shopvalue.selectByPK", pk);
		return record;
	}
    
}
