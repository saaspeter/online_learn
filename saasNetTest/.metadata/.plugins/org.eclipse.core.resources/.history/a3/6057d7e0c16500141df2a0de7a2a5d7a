package netTest.paper.dao.impl;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import netTest.bean.BOFactory;
import netTest.bean.BeanFactory;
import netTest.paper.dao.PaperDao;
import netTest.paper.dao.PaperquesDao;
import netTest.paper.dto.PaperquesQuery;
import netTest.paper.vo.Paper;
import netTest.paper.vo.Paperques;
import netTest.wareques.dao.QuestionDao;
import netTest.wareques.vo.Question;

import org.apache.log4j.Logger;

import commonTool.base.BaseDao;
import commonTool.exception.NeedParamsException;

public class PaperquesDaoImpl extends BaseDao implements PaperquesDao {

	static Logger log = Logger.getLogger(PaperquesDaoImpl.class.getName());
	
	private QuestionDao questionDao;
	
    /**
     *
     */
    public PaperquesDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Paperques selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Paperques vo = (Paperques) this.queryForObject("Paperques.selectByPK", pk);
		Question quesVO = questionDao.selectByPK(vo.getQuesid());
		vo.copyQuestion(quesVO);
		return vo;
    }
    
    /**
     * 根据试卷id和问题类型查询试卷题目, 仅仅查询单独的题型, 各个题目的子题目不在此加载
     * @param papre
     * @param questypeid
     * @return
     */
    public List<Paperques> qryByPaperPatt(Long paperid,Long questypeid){
    	PaperquesQuery queryVO = new PaperquesQuery();
    	queryVO.setPaperid(paperid);
    	queryVO.setQuestypeid(questypeid);
    	List<Paperques> list = this.queryForList("Paperques.qryByPaperPatt", queryVO);
    	StringBuffer strBuffer = new StringBuffer();
    	String selectByPkStr;
    	if(list!=null && list.size()>0){
    		for(Paperques paperquesVO1 : list){
    			strBuffer.append(paperquesVO1.getQuesid()).append(",");
    		}
    		selectByPkStr = strBuffer.toString();
    		selectByPkStr = selectByPkStr.substring(0, selectByPkStr.length()-1);
    		Map<Long, Question> quesMap = questionDao.selectByPkStr(selectByPkStr);
    		for(Paperques paperquesVO2 : list){
    			paperquesVO2.copyQuestion(quesMap.get(paperquesVO2.getQuesid()));
    		}
    	}
    	return list;
    }
           
    /**
     * select paperques by quesID
     */
    public List<Paperques> qryPaperquesByQues(List<Long> quesidlist, Long paperid, Long shopid){
		if(quesidlist==null || quesidlist.size()<1 || shopid==null)
			return null;
		Paperques vo = new Paperques();
		vo.setQuesidlist(quesidlist);
		vo.setShopid(shopid);
		vo.setPaperid(paperid);
		List<Paperques> list = this.queryForList("Paperques.qryPaperquesByQuesID", vo);
		return list;
    }
    
    /**
     * select paper by quesID
     */
    public Collection<Paper> qryPaperByQues(List<Long> quesidlist, Long shopid){
		if(quesidlist==null || quesidlist.size()<1 || shopid==null)
			return null;
		Paperques vo = new Paperques();
		vo.setQuesidlist(quesidlist);
		vo.setShopid(shopid);
		List<Paperques> queslist = this.queryForList("Paperques.qryPaperquesByQuesID", vo);
		if(queslist!=null && queslist.size()>0){
			PaperDao paperdao = BOFactory.getPaperDao();
			Paper papervotemp = null;
			Map<Long, Paper> map = new HashMap<Long, Paper>();
			for(Paperques votemp : queslist){
				if(map.get(papervotemp.getPaperid())==null){
				   papervotemp = paperdao.selectByPK_plain(votemp.getPaperid());
				   map.put(votemp.getPaperid(), papervotemp);
				}
			}
			return map.values();
		}
		return null;
    }
    
    /**
     * 查询数目
     * @param queryVO
     * @return
     */
    public int countByVO(PaperquesQuery queryVO){
    	if(queryVO==null)
			throw new NeedParamsException();
		Integer nums = (Integer)this.queryForObject("Paperques.selectByVOCount",queryVO);
		return nums.intValue();
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Paperques record){
    	if(record==null)
    		return null;
    	Paperques vo = (Paperques)record;
		return (Long)super.insert("Paperques.insert", vo);
    }
    
    
    /**
     * update a record By PK
     */
    public int updateByPK(Paperques record){
    	if(record==null||record.getQuesid()==null)
    		return 0;
    	Paperques vo = (Paperques)record;
		int rows = super.update("Paperques.updateByPK", vo);
		return rows;
    }
    
    /**
     * 根据题目题型questypeid更新试卷中改型题目的每题分值
     * @param quesid
     * @param num
     * @return
     */
    public int updateScoreByPatt(Long shopid,Long paperid,Long questypeid,Float paperquesscore){
    	if(shopid==null||paperid==null||questypeid==null||paperquesscore==null)
    		return 0;
    	Paperques vo = new Paperques();
    	vo.setShopid(shopid);
    	vo.setPaperid(paperid);
    	vo.setQuestypeid(questypeid);
    	vo.setPaperquesscore(paperquesscore);
    	int rows = super.update("Paperques.updateScoreByPatt", vo);
		return rows;
    }
    
    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Paperques save(Paperques record){
    	if(record==null)
    		return null;
		if(record.getQuesid()==null||record.getQuesid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setQuesid(pkValue);
    		return (Paperques)record;
		}else{
			this.updateByPK(record);
			return (Paperques)record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk){
    	if(pk==null)
    		return 0;
		int rows = super.delete("Paperques.deleteByPK", pk);
		return rows;
    }
    
	/**
     * insertBatch records of List
     */
    public int insertBatch(List list){
    	if(list==null||list.size()<=0)
    		return 0;  	
    	int rows = super.insertBatch("Paperques.insert", list);
       	return rows;
    }
    
    /**
     * 查询同一类型题目的需要计分的数目
     * @param queryVO
     * @return
     */
    public int qryOptnumByPatt(Long shopid,Long paperid,Long questypeid){
    	if(shopid==null||paperid==null||questypeid==null)
			throw new NeedParamsException();
    	PaperquesQuery queryVO = new PaperquesQuery();
    	queryVO.setShopid(shopid);
    	queryVO.setPaperid(paperid);
    	queryVO.setQuestypeid(questypeid);
		Integer nums = 0;
		Object obj = this.queryForObject("Paperques.qryOptnumByPatt",queryVO);
		if(obj!=null){
			nums = (Integer)obj;
		}
		return nums.intValue();
    }

	public QuestionDao getQuestionDao() {
		return questionDao;
	}

	public void setQuestionDao(QuestionDao questionDao) {
		this.questionDao = questionDao;
	}

	/**
     * static spring getMethod
     */
     public static PaperquesDao getInstance(){
       	 PaperquesDao dao = (PaperquesDao)BeanFactory.getBeanFactory().getBean("paperquesDao");
         return dao;
     }
    
}
