<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

  <import resource="classpath:commonTool/bean/datasourceSetting.xml"/> 

	<!-- ======================== FILTER CHAIN ======================= -->
	
    <!--  if you wish to use channel security, add "channelProcessingFilter," in front
         of "httpSessionContextIntegrationFilter" in the list below -->
    <!--
         FilterChainProxy会按顺序来调用这些filter,使这些filter能享用Spring ioc的功能,
         CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON定义了url比较前先转为小写
         PATTERN_TYPE_APACHE_ANT定义了使用Apache ant的匹配模式
     -->
	<bean id="filterChainProxy"
		class="org.acegisecurity.util.FilterChainProxy">
		<property name="filterInvocationDefinitionSource">
			<value>
				CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT
				/**=httpSessionContextIntegrationFilter,logoutFilter,casProcessingFilter,basicProcessingFilter,securityContextHolderAwareRequestFilter,rememberMeProcessingFilter,anonymousProcessingFilter,exceptionTranslationFilter,filterInvocationInterceptor
			</value>
		</property>
	</bean>
	
	<!--
         authenticationManager　通过Providers提供认证者列表,如果一个认证提供者失败可以尝试另外一个认证提供者,以保证获取不同来源的身份认证，如
         DaoAuthenticationProvider 从数据库中读取用户信息验证身份
         AnonymousAuthenticationProvider 匿名用户身份认证
         RememberMeAuthenticationProvider 已存cookie中的用户信息身份认证

         其它的还有
         AuthByAdapterProvider 使用容器的适配器验证身份
         CasAuthenticationProvider 根据Yale中心认证服务验证身份, 用于实现单点登陆
         JaasAuthenticationProvider 从JASS登陆配置中获取用户信息验证身份
         RemoteAuthenticationProvider 根据远程服务验证用户身份
         RunAsImplAuthenticationProvider 对身份已被管理器替换的用户进行验证
         X509AuthenticationProvider 从X509认证中获取用户信息验证身份
         TestingAuthenticationProvider 单元测试时使用

         每个认证者会对自己指定的证明信息进行认证，如DaoAuthenticationProvider仅对UsernamePasswordAuthenticationToken这个证明信息进行认证。
     -->
	<bean id="authenticationManager" class="org.acegisecurity.providers.ProviderManager">
		<property name="providers">
           <list>
              <ref local="casAuthenticationProvider"/>
           </list>
        </property>
	</bean>
	
	<bean id="casAuthenticationProvider" class="org.acegisecurity.providers.cas.CasAuthenticationProvider">
        <property name="ticketValidator">
           <ref bean="ticketValidator"/>
        </property>
        <property name="casProxyDecider">
           <ref bean="casProxyDecider"/>
        </property>
        <property name="statelessTicketCache">
           <ref bean="statelessTicketCache"/>
        </property>
        <property name="casAuthoritiesPopulator">
           <ref bean="casAuthritiesPopulator"/>
        </property>
        <property name="key">
           <value>some_unique_key</value>
        </property>
    </bean>


    <!--
         httpSessionContextIntegrationFilter　每次request前 HttpSessionContextIntegrationFilter从Session中获取Authentication对象，在request完后
         又把Authentication对象保存到Session中供下次request使用,此filter必须其他Acegi filter前使用
     -->
	<bean id="httpSessionContextIntegrationFilter" class="org.acegisecurity.context.HttpSessionContextIntegrationFilter" />

 	<!--
         logoutFilter负责退出登陆并且保存remember-me cookie
     -->
	<bean id="logoutFilter" class="org.acegisecurity.ui.logout.LogoutFilter">
		<constructor-arg value="/login.jsp" />
		<!-- URL redirected to after logout -->
		<constructor-arg>
			<list>
				<ref bean="rememberMeServices" />
				<bean class="org.acegisecurity.ui.logout.SecurityContextLogoutHandler" />
			</list>
		</constructor-arg>
	</bean>

	<!-- 
	　　　自动监听 AuthenticationEvent 信息
	-->
	<bean id="loggerListener" class="org.acegisecurity.event.authentication.LoggerListener" />

    <!-- 在其继承的虚类AbstractProcessingFilter中的方法successfulAuthentication中把用户信息放入SecurityContextHolder中 -->
	<bean id="casProcessingFilter" class="org.acegisecurity.ui.cas.CasProcessingFilter">
        <property name="authenticationManager"><ref local="authenticationManager"/></property>
        <property name="authenticationFailureUrl"><value>/casfailed.jsp</value></property>
        <property name="defaultTargetUrl"><value>/login.do</value></property>
        <property name="filterProcessesUrl"><value>/j_acegi_cas_security_check</value></property>
    </bean>
	
	<!-- 
		用于处理HTTP头的认证信息，如从Spring远程协议(如Hessian和Burlap)或普通的浏览器如IE,Navigator的HTTP头中获取用户信息，
		将他们转交给通过authenticationManager属性装配的认证管理器。如果认证成功，会将一个Authentication对象放到会话中，
		否则，如果认证失败，会将控制转交给认证入口点(通过authenticationEntryPoint属性装配)
	-->
   <bean id="basicProcessingFilter" class="org.acegisecurity.ui.basicauth.BasicProcessingFilter">
      <property name="authenticationManager"><ref local="authenticationManager"/></property>
      <property name="authenticationEntryPoint"><ref local="basicProcessingFilterEntryPoint"/></property>
   </bean>

   <bean id="basicProcessingFilterEntryPoint" class="org.acegisecurity.ui.basicauth.BasicProcessingFilterEntryPoint">
      <property name="realmName"><value>Contacts Realm</value></property>
   </bean>
   
    <!--
         securityContextHolderAwareRequestFilter　通过装饰模式，装饰的HttpServletRequest对象。
         其Wapper是ServletRequest包装类HttpServletRequestWrapper的子类(如:SavedRequestAwareWrapper或SecurityContextHolderAwareRequestWrapper)，
         附上获取用户权限信息，request参数，headers 和 cookies 的方法
     -->
	<bean id="securityContextHolderAwareRequestFilter" class="org.acegisecurity.wrapper.SecurityContextHolderAwareRequestFilter" />

 	<!--
         　rememberMeProcessingFilter　会当SecurityContextHolder中不存在Authentication.用户授权信息，
         rememberMeProcessingFilter就会调用autoLogin()方法从cookie中获取用户信息,在验证filter之前使用
     -->
	<bean id="rememberMeProcessingFilter" class="org.acegisecurity.ui.rememberme.RememberMeProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="rememberMeServices" ref="rememberMeServices" />
	</bean>
	
	 <!--
         rememberMeServices　提供rememberMe功能
         登陆验证时：登陆成功后会调用loginSuccess方法，在cookie里面保留用户信息，
         格式为：username + ":" + expiryTime + ":" + Md5Hex(username + ":" + expiryTime + ":" + password + ":" + key)
         访问页面时：rememberMeProcessingFilter会调用autoLogin方法，在cookie中获取用户信息
     -->
	<bean id="rememberMeServices" class="org.acegisecurity.ui.rememberme.TokenBasedRememberMeServices">
		<property name="userDetailsService" ref="userDetailsService" />
		<property name="key" value="changeThis" />
	</bean>

	 <!--
         anonymousProcessingFilter：如果不存在任何授权信息时，自动构造匿名用户身份至SecurityContextHolder中
     -->
	<bean id="anonymousProcessingFilter" class="org.springside.components.acegi.intercept.filter.SaasAnonymousProcessingFilter">
		<property name="key" value="changeThis" />
		<property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS" />
	</bean>

	<!-- 
	　　　　exceptionTranslationFilter异常转换过滤器，主要是处理AccessDeniedException
	　　　　和AuthenticationException，将给每个异常找到合适的"去向" 
	-->
	<bean id="exceptionTranslationFilter" class="org.acegisecurity.ui.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint"><ref local="casProcessingFilterEntryPoint"/></property>

		<property name="accessDeniedHandler">
			<bean class="org.acegisecurity.ui.AccessDeniedHandlerImpl">
				<property name="errorPage" value="/pubs/accessDenied.jsp" />
			</bean>
		</property>
	</bean>
	
	<bean id="casProcessingFilterEntryPoint" class="org.acegisecurity.ui.cas.CasProcessingFilterEntryPoint">
        <property name="loginUrl"><value>https://localhost:8443/saasCasServer-3.1.1/login</value></property>
        <property name="serviceProperties"><ref local="serviceProperties"/></property>
    </bean>
	
	<!-- 
	　　　passwordEncoder　使用Md5算法加密 
	-->
	<bean id="passwordEncoder" class="org.acegisecurity.providers.encoding.Md5PasswordEncoder" />

	<!--
		daoAuthenticationProvider　提供用户授权信息，
         userDetailsService 定义jdbcDaoImpl从数据库获取用户信息
         userCache ehcache缓存user信息。
         passwordEncoder 取得密码后作加密
         <property name="passwordEncoder" ref="passwordEncoder" />
     -->
	<bean id="daoAuthenticationProvider" class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="userDetailsService" />
		<property name="userCache" ref="userCache" />
		
	</bean>
	
	
	<!--
         filterInvocationInterceptor在执行转向url前检查objectDefinitionSource中设定的用户权限信息
         过程：
         首先，objectDefinitionSource中定义了访问URL需要的属性信息(这里的属性信息仅仅是标志，告诉accessDecisionManager要用哪些voter来投票)
         然后，authenticationManager掉用自己的provider来对用户的认证信息进行校验。
         最后，有投票者根据用户持有认证和访问url需要的属性，调用自己的voter来投票，决定是否允许访问。
       <bean id="filterInvocationInterceptor" class="org.acegisecurity.intercept.web.FilterSecurityInterceptor">
     -->
    
	<bean id="filterInvocationInterceptor" class="org.springside.components.acegi.intercept.filter.MyFilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager">
			<bean class="org.acegisecurity.vote.AffirmativeBased">
				<property name="allowIfAllAbstainDecisions" value="false" />
				<property name="decisionVoters">
					<list>
						<bean class="commonTool.security.voter.RoleVoterEx" />
						<bean class="org.acegisecurity.vote.AuthenticatedVoter" />
					</list>
				</property>
			</bean>
		</property>
		<property name="objectDefinitionSource"	ref="filterDefinitionSource"/>
	</bean>
	
	<!-- 
	　　　methodSecurityInterceptor在执行方法前进行拦截，检查用户权限信息
	-->
	<bean id="securityInterceptor" class="org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor">
		<property name="validateConfigAttributes">
			<value>false</value>
		</property>
		<property name="authenticationManager">
			<ref local="authenticationManager" />
		</property>
		<property name="accessDecisionManager">
			<ref local="accessDecisionManager" />
		</property>
		<property name="runAsManager">
			<ref local="runAsManager" />
		</property>
		<property name="objectDefinitionSource">
			<ref local="objectDefinitionSource" />
		</property>
	</bean>
	
	<!-- 
	　　An access decision manager used by the business objects
	-->
	<bean id="accessDecisionManager" class="org.acegisecurity.vote.UnanimousBased">
		<property name="allowIfAllAbstainDecisions">
			<value>false</value>
		</property>
		<property name="decisionVoters">
		    <list>
				<ref local="roleVoter" />
			</list>
		</property>
	</bean>
	
	<!-- An access decision voter that reads ROLE_* configuaration settings -->
	<bean id="roleVoter" class="org.acegisecurity.vote.RoleVoter" />

	<!-- RunAsManager -->
	<bean id="runAsManager" class="org.acegisecurity.runas.RunAsManagerImpl">
		<property name="key">
			<value>my_run_as_password</value>
		</property>
	</bean>
	
	<!-- ================= Springside Extends == -->
	<!--
		从cache中获取Url资源信息
	-->
	<bean id="filterDefinitionSource" class="org.springside.components.acegi.intercept.web.CacheBaseUrlDefinitionSource">
		<property name="resourceCache" ref="resourceCache" />
	</bean>
	
	<!--
		从cache中获取Method资源信息
	-->
	<bean id="objectDefinitionSource" class="org.springside.components.acegi.intercept.method.CacheBaseMethodDefinitionSource">
		<property name="resourceCache" ref="resourceCache" />
	</bean>

	<!--
		登陆时从查询数据据的用户记录，并且把用户配置成自己想要的对象
	 -->
    <bean id="userDetailsService" class="org.springside.components.acegi.service.UserDetailsServiceJdbcImpl">
	</bean>

	<!--
		登陆时从缓存里获取用户,暂时废弃
	 -->
	<!-- 
	<bean id="userDetailsService" class="org.springside.components.acegi.InCacheDaoImpl">
		<property name="userCache" ref="userCache" />
	</bean>
	 -->

	<bean name="userCache" class="org.acegisecurity.providers.dao.cache.EhCacheBasedUserCache">
		<property name="cache">
			<bean
				class="org.springframework.cache.ehcache.EhCacheFactoryBean">
				<property name="cacheManager" ref="cacheManager" />
				<property name="cacheName" value="platform.userCache" />
			</bean>
		</property>
	</bean>

	<bean id="resourceCache" class="org.springside.components.acegi.cache.ResourceCache"
		autowire="byName">
		<property name="syscode">
		    <value>00000001</value>
		</property>
		<property name="cache">
			<bean
				class="org.springframework.cache.ehcache.EhCacheFactoryBean">
				<property name="cacheManager" ref="cacheManager" />
				<property name="cacheName" value="platform.resourceCache" />
			</bean>
		</property>
	</bean>

	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation">
			<value>
				classpath:platform/bean/ehcache.xml
			</value>
		</property>
	</bean>

	<!-- 
		设置需要securityInterceptor来判断权限的类
	-->
	<bean id="autoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="proxyTargetClass" value="true" />
		<property name="interceptorNames">
			<list>
				<idref local="securityInterceptor" />
			</list>
		</property>
		<property name="beanNames">
			<list>
			    <idref bean="userManager"/>
			    <idref bean="roleManager"/>
			    <idref bean="rescManager"/>
			</list>
		</property>
	</bean>
	
	<!-- cas 的配置 -->
	<bean id="ticketValidator" class="org.acegisecurity.providers.cas.ticketvalidator.CasProxyTicketValidator">
        <property name="casValidate">
           <value>https://localhost:8443/saasCasServer-3.1.1/proxyValidate</value>
        </property>
        <property name="serviceProperties">
           <ref bean="serviceProperties"/>
        </property>
    </bean>
     
    <bean id="serviceProperties" class="org.acegisecurity.ui.cas.ServiceProperties">
        <property name="service">
           <value>https://localhost:8443/platform/j_acegi_cas_security_check</value>
        </property>   
    </bean>
     
    <bean id="casProxyDecider" class="org.acegisecurity.providers.cas.proxy.RejectProxyTickets"/>
     
    <bean id="statelessTicketCache" class="org.acegisecurity.providers.cas.cache.EhCacheBasedTicketCache">
        <property name="cache">
            <bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">
                <property name="cacheManager">
                    <ref local="cacheManager"/>
                </property>
                <property name="cacheName" value="userCache"/>
            </bean>
        </property>
    </bean>
     
    <bean id="casAuthritiesPopulator" class="org.acegisecurity.providers.cas.populator.DaoCasAuthoritiesPopulator">
        <property name="userDetailsService">
           <ref bean="userDetailsService"/>
        </property>
    </bean>
    

</beans>
