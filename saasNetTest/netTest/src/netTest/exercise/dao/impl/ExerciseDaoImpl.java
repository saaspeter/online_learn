package netTest.exercise.dao.impl;

import java.util.ArrayList;
import java.util.List;

import netTest.bean.BeanFactory;
import netTest.exercise.dao.ExerciseDao;
import netTest.exercise.dto.ExerciseQuery;
import netTest.exercise.vo.Exercise;

import org.apache.log4j.Logger;
import org.springframework.cache.annotation.Cacheable;

import commonTool.base.BaseDao;
import commonTool.cache.CacheSynchronizer;

public class ExerciseDaoImpl extends BaseDao implements ExerciseDao {

	static Logger log = Logger.getLogger(ExerciseDaoImpl.class.getName());
	
	public final static String ExerciseChangeCacheType = "ExerciseChangeCacheType";
     
    /**
     * select some record by PK(包括试卷属性表)
     */
	@Cacheable(value="netTest.learncontentCache", key="'ExerciseDao.selectByPK~exercise:'+#pk", unless="#result==null")
    public Exercise selectByPK(Long pk){
    	if(pk==null)
    		return null;
    	Exercise record = (Exercise) this.queryForObject("Exercise.selectByPK", pk);
    	// build assoic for cache
		if(record!=null){
    	   CacheSynchronizer.getInstance().buildAssoc("netTest.learncontentCache", 
    			 "ExerciseDao.selectByPK~"+Exercise.ObjectType+":"+pk);
    	}
		return record;
    }
    
    /**
     * need add to cache
     * @param productid
     * @param contentcateid
     * @return
     */
	@Cacheable(value="netTest.learncontentCache", key="'ExerciseDao.selectExerByProd~'+#productid+'~'+#contentcateid", unless="#result==null")
    public List<Exercise> selectExerByProd(Long productid, Long contentcateid){
    	ExerciseQuery queryVO = new ExerciseQuery();
    	queryVO.setProductbaseid(productid);
    	queryVO.setContentcateid(contentcateid);
    	List<Exercise> list = (List<Exercise>)this.queryForList("Exercise.selectByVO", queryVO);
    	if(list!=null){
        	CacheSynchronizer.getInstance().buildAssoc("netTest.learncontentCache", 
        			"ExerciseDao.selectExerByProd~"+productid+"~"+contentcateid, 
                    new String[]{ExerciseChangeCacheType+":"+productid});
     	}
		return list;
    }
    
    /**
     * select records by queryVO
     */
    public List selectByVO(ExerciseQuery queryVO){
		if(queryVO==null)
			return new ArrayList();
		List list = this.queryForList("Exercise.selectByVO", queryVO);
		return list;
    }   
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Exercise record){
    	if(record==null)
    		return null;
    	Long pk = (Long)super.insert("Exercise.insert", record);
    	
    	CacheSynchronizer.getInstance().pubFlush("netTest.learncontentCache", Exercise.ObjectType, pk.toString());
    	CacheSynchronizer.getInstance().pubFlush("netTest.learncontentCache", ExerciseChangeCacheType, record.getProductbaseid().toString());
    	CacheSynchronizer.getInstance().pubFlush("netTest.productCache", ExerciseChangeCacheType, record.getProductbaseid().toString());
    	
    	return pk;
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Exercise record){
    	if(record==null||record.getExerid()==null)
    		return 0;
		int rows = super.update("Exercise.updateByPK", record);
		Exercise planvo = getInstance().selectByPK(record.getExerid());
		CacheSynchronizer.getInstance().pubFlush("netTest.learncontentCache", Exercise.ObjectType, record.getExerid().toString());
		CacheSynchronizer.getInstance().pubFlush("netTest.learncontentCache", ExerciseChangeCacheType, planvo.getProductbaseid().toString());
		CacheSynchronizer.getInstance().pubFlush("netTest.productCache", ExerciseChangeCacheType, planvo.getProductbaseid().toString());
		return rows;
    }
    
    /**
     * update the exercise modifyTime and version
     */
//    public int updateModInfo(Long exerid, Date date){
//    	if(exerid==null)
//    		return 0;
//    	if(date==null)
//    	{
//    		date = DateUtil.getInstance().getNowtime_GLNZ();
//    	}
//    	Exercise vo = new Exercise();
//		vo.setExerid(exerid);
//		vo.setModitime(date);
//    	int rows = super.update("Exercise.updateModInfo", vo);
//		return rows;
//    }
    
    /**
     * update the exercise modifyTime and version
     */
//    public int updateModInfo(List<Long> pkList, Date date){
//    	if(pkList==null||pkList.size()<1)
//    		return 0;
//    	List<Exercise> list = new ArrayList<Exercise>();
//    	if(date==null)
//    	{
//    		date = DateUtil.getInstance().getNowtime_GLNZ();
//    	}
//    	Exercise vo = null;
//    	for(Long pk : pkList){
//    		vo = new Exercise();
//    		vo.setExerid(pk);
//    		vo.setModitime(date);
//    	}
//    	int rows = super.updateBatch("Exercise.updateModInfo", list);
//		return rows;
//    }
    
    /**
     * 更新试卷分数，同时也更新试卷的最后修改时间和试卷的版本号
     * @param paperid
     * @param papertotalscore
     * @param updateType: 更新类型，1为分数更新为参数。2为分数做增量加减，即在原有的分数上做加法
     * @param shopid
     */
//    public int updateScore(Long exerid,Float totalscore,int updateType,Long shopid){
//    	if(exerid==null||totalscore==null||shopid==null)
//    		return 0;
//    	Date date = DateUtil.getInstance().getNowtime_GLNZ();
//    	Exercise vo = new Exercise();
//    	vo.setExerid(exerid);
//    	vo.setShopid(shopid);
//    	vo.setTotalscore(totalscore);
//    	
//    	String sqlStr = "Exercise.updateTotalscore1";
//    	if(updateType==2)
//    		sqlStr = "Exercise.updateTotalscore2";
//		int rows = super.update(sqlStr, vo);
//		return rows;
//    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Exercise save(Exercise record){
    	if(record==null)
    		return null;
		if(record.getExerid()==null){
			Long pkValue = this.insert(record);
			record.setExerid(pkValue);
    		return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * 
     * @param pk:
     */
    public int deleteByPK(Long pk){
    	if(pk==null)
    		return 0;
    	Exercise planvo = getInstance().selectByPK(pk);
		int rows = super.delete("Exercise.deleteByPK", pk);
		
		CacheSynchronizer.getInstance().pubFlush("netTest.learncontentCache", Exercise.ObjectType, pk.toString());
		CacheSynchronizer.getInstance().pubFlush("netTest.learncontentCache", ExerciseChangeCacheType, planvo.getProductbaseid().toString());
		CacheSynchronizer.getInstance().pubFlush("netTest.productCache", ExerciseChangeCacheType, planvo.getProductbaseid().toString());
		return rows;
    }
    
	/**
     * insertBatch records of List
     */
//    public int insertBatch(List list){
//    	if(list==null||list.size()<=0)
//    		return 0;
//    	int rows = 0;
//       	rows = super.insertBatch("Exercise.insert", list);
//       	return rows;
//    }
    
    /**
     * deleteBatch records by the String Array of PK
     */
//    public int deleteBatchByPK(String[] pkArray){
//    	if(pkArray==null||pkArray.length<=0)
//    		return 0;
//    	int rows = 0;
//    	Long[] arrs = new Long[pkArray.length];
//		for(int i=0;i<pkArray.length;i++){
//			if(pkArray[i]!=null)
//				arrs[i] = new Long(Long.parseLong(pkArray[i]));
//		}
//		rows = super.deleteBatch("Exercise.deleteByPK", arrs);
//		return rows;
//    }
    
    
    /**
     * static spring getMethod
     */
     public static ExerciseDao getInstance(){
    	 ExerciseDao dao = (ExerciseDao)BeanFactory.getBeanFactory().getBean("exerciseDao");
         return dao;
     }
    
}
