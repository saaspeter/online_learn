package netTest.exercise.dao.impl;

import java.util.ArrayList;
import java.util.List;

import netTest.bean.BeanFactory;
import netTest.exercise.dao.UserexeranswerDao;
import netTest.exercise.dto.UserexeranswerQuery;
import netTest.exercise.vo.Userexeranswer;

import org.apache.log4j.Logger;

import commonTool.base.BaseDao;
import commonTool.util.StringUtil;

public class UserexeranswerDaoImpl extends BaseDao implements UserexeranswerDao {

	static Logger log = Logger.getLogger(UserexeranswerDaoImpl.class.getName());
	
    /**
     *
     */
    public UserexeranswerDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Userexeranswer selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Userexeranswer record = (Userexeranswer) this.queryForObject("Userexeranswer.selectByPK", pk);
		return record;
    }
    
    /**
     * select records by queryVO
     */
    public List selectByVO(UserexeranswerQuery queryVO){
		if(queryVO==null)
			return new ArrayList();
		List list = this.queryForList("Userexeranswer.selectByVO", queryVO);
		return list;
    }
    
    /**
     * 查询用户某次考试的某份试卷的所有答案
     * @param shopid
     * @param testid
     * @param userid
     * @param paperid
     * @return
     */
    public List<Userexeranswer> qryUseranswerList(Long shopid, Long userid, Long exerid){
        if(shopid==null||userid==null||exerid==null)
        	return null;
        List<Userexeranswer> list = null;
        UserexeranswerQuery queryVO = new UserexeranswerQuery();
        queryVO.setUserid(userid);
        queryVO.setExerid(exerid);
        list = (List<Userexeranswer>)this.selectByVO(queryVO);
	    return list;
    }
    
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Userexeranswer record){
    	if(record==null)
    		return null;
		return (Long)super.insert("Userexeranswer.insert", record);
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Userexeranswer record){
    	if(record==null||record.getUseranswerid()==null)
    		return 0;
		int rows = super.update("Userexeranswer.updateByPK", record);
		return rows;
    }
    
    /**
     * 更新用户练习的答案
     */
    public int updUseranswerPK(Userexeranswer record){
    	if(record==null||record.getUseranswerid()==null
    	   ||(StringUtil.isEmpty(record.getQuesitemflag())
    			   &&StringUtil.isEmpty(record.getAnswer())
    			   &&record.getIsright()==null&&record.getExaminestatus()==null
    		  ))
    		return 0;
		int rows = super.update("Userexeranswer.updUseranswerPK", record);
		return rows;
    }
    
    /**
     * 批量更新用户练习的答案
     */
    public int batchUpdUseranswerPK(List<Userexeranswer> list){
    	if(list==null||list.size()<1)
    		return 0;
    	int rows = super.updateBatch("Userexeranswer.updUseranswerPK", list);
		return rows;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Userexeranswer save(Userexeranswer record){
    	if(record==null)
    		return null;
		if(record.getUseranswerid()==null||record.getUseranswerid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setUseranswerid(pkValue);
			return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk){
    	if(pk==null)
    		return 0;
		int rows = super.delete("Userexeranswer.deleteByPK", pk);
		return rows;
    }
    
    /**
     * 删除该次练习的所有用户答案
     */
    public int deleteByExer(Long exerid){
    	if(exerid==null)
    		return 0;
		int rows = super.delete("Userexeranswer.deleteByExer", exerid);
		return rows;
    }
    
    /**
     * 删除某个用户的某次练习的所有答案
     */
    public int deleteByExerUser(Long exerid, Long userid){
    	if(exerid==null||userid==null)
    		return 0;
    	Userexeranswer vo = new Userexeranswer();
    	vo.setExerid(exerid);
    	vo.setUserid(userid);
		int rows = super.delete("Userexeranswer.deleteByExerUser", vo);
		return rows;
    }

	/**
     * insertBatch records of List
     */
    public int insertBatch(List list){
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
       	rows = super.insertBatch("Userexeranswer.insert", list);
       	return rows;
    }
    
    /**
     * deleteBatch records by the String Array of PK
     */
    public int deleteBatchByPK(String[] pkArray){
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
    	Long[] arrs = new Long[pkArray.length];
		for(int i=0;i<pkArray.length;i++){
			if(pkArray[i]!=null)
				arrs[i] = new Long(Long.parseLong(pkArray[i]));
		}
		rows = super.deleteBatch("Userexeranswer.deleteByPK", arrs);
		return rows;
    }
    
    /**
     * static spring getMethod
     */
     public static UserexeranswerDao getInstance(){
       	 UserexeranswerDao dao = (UserexeranswerDao)BeanFactory.getBeanFactory().getBean("userexeranswerDao");
         return dao;
     }
    
}
