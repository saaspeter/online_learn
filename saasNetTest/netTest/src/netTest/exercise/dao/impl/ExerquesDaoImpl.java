package netTest.exercise.dao.impl;

import java.util.ArrayList;
import java.util.List;

import netTest.bean.BeanFactory;
import netTest.exercise.dao.ExerquesDao;
import netTest.exercise.dto.ExerquesQuery;
import netTest.exercise.vo.Exerques;

import org.apache.log4j.Logger;

import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.constant.CommonConstant;
import commonTool.exception.NeedParamsException;
import commonTool.util.StringUtil;

public class ExerquesDaoImpl extends BaseDao implements ExerquesDao {

	static Logger log = Logger.getLogger(ExerquesDaoImpl.class.getName());
	
    /**
     *
     */
    public ExerquesDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Exerques selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Exerques record = (Exerques) this.queryForObject("Exerques.selectByPK", pk);
		return record;
    }
           
    /**
     * select records by queryVO
     */
    public List selectByVO(ExerquesQuery queryVO){
		if(queryVO==null)
			return new ArrayList();
		List list = this.queryForList("Exerques.selectByVO", queryVO);
		return list;
    }
    
    /**
     * select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    public Page selectByVOPage(ExerquesQuery queryVO,int pageIndex,int pageSize,Integer total){
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        Page page = null;
        String sqlStr = "";
        if(queryVO==null){
        	page = Page.EMPTY_PAGE;
        } else {
        	sqlStr = "Exerques.selectByVO";
        	page = queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
        }
        return page;
    }
    
    /**
     * 根据题目id或题库id，删除练习中题目引用和用户练习答案中的引用
     * @param quesIdStr
     * @param wareid
     * @return
     */
    public void delExerByWareQues(String quesIdStr, Long wareid){
    	if((quesIdStr==null||quesIdStr.trim().length()<1)&&wareid==null){
    		return;
    	}
    	if(quesIdStr!=null){
    		quesIdStr = StringUtil.trimComma(quesIdStr);
    		// 删除练习中的题目引用, 根据传入的题目id
    		super.delete("Exerques.delExerByQues", quesIdStr);
    		// 删除用户答案中的题目引用, 根据传入的题库id
    		super.delete("Userexeranswer.delExerByQues", quesIdStr);
    	}else if(wareid!=null){
    		super.delete("Exerques.delExerByWare", wareid);
    		super.delete("Userexeranswer.delExerByWare", wareid);
    	}
    }
    
    /**
     * 根据练习id和问题类型查询试卷题目
     * @param papre
     * @param questypeid
     * @return
     */
  //TODO 以后要修改，改成单独load question
    public List qryQuesByPatt(Long exerid,Integer questype){
    	List list = null;
    	ExerquesQuery queryVO = new ExerquesQuery();
    	queryVO.setExerid(exerid);
    	queryVO.setQuestype(questype);
    	list = this.queryForList("Exerques.qryQuesByPatt", queryVO);
    	return list;
    }
    
    /**
     * 查询数目
     * @param queryVO
     * @return
     */
    public int countByVO(ExerquesQuery queryVO){
    	if(queryVO==null)
			throw new NeedParamsException();
		Integer nums = (Integer)this.queryForObject("Exerques.selectByVOCount",queryVO);
		return nums.intValue();
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Exerques record){
    	if(record==null)
    		return null;
		return (Long)super.insert("Exerques.insert", record);
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Exerques record){
    	if(record==null||record.getExerid()==null)
    		return 0;
		int rows = super.update("Exerques.updateByPK", record);
		return rows;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Exerques save(Exerques record){
    	if(record==null)
    		return null;
		if(record.getExerid()==null||record.getExerid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setExerid(pkValue);
    		return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk){
    	if(pk==null)
    		return 0;
		int rows = super.delete("Exerques.deleteByPK", pk);
		return rows;
    }
    
    /**
     * delete a record by question
     */
    public int deleteByQuesId(Long quesid){
    	if(quesid==null)
    		return 0;
		int rows = super.delete("Exerques.deleteByQuesId", quesid);
		return rows;
    }
    
    /**
     * 删除该次练习的所有题目
     */
    public int deleteByExer(Long exerid){
    	if(exerid==null)
    		return 0;
		int rows = super.delete("Exerques.deleteByExer", exerid);
		return rows;
    }
    
	/**
     * insertBatch records of List
     */
    public int insertBatch(List list){
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
       	rows = super.insertBatch("Exerques.insert", list);
       	return rows;
    }
    
    /**
     * deleteBatch records by the String Array of PK
     */
    public int deleteBatchByPK(String[] pkArray){
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
    	Long[] arrs = new Long[pkArray.length];
		for(int i=0;i<pkArray.length;i++){
			if(pkArray[i]!=null)
				arrs[i] = new Long(Long.parseLong(pkArray[i]));
		}
		rows = super.deleteBatch("Exerques.deleteByPK", arrs);
		return rows;
    }
    
    /**
     * static spring getMethod
     */
     public static ExerquesDao getInstance(){
       	 ExerquesDao dao = (ExerquesDao)BeanFactory.getBeanFactory().getBean("exerquesDao");
         return dao;
     }
    
}
