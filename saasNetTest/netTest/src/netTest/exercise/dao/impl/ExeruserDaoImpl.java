package netTest.exercise.dao.impl;

import java.util.List;

import netTest.bean.BeanFactory;
import netTest.exercise.dao.ExeruserDao;
import netTest.exercise.dto.ExeruserQuery;
import netTest.exercise.vo.Exeruser;

import org.apache.log4j.Logger;

import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.constant.CommonConstant;

public class ExeruserDaoImpl extends BaseDao implements ExeruserDao {

	static Logger log = Logger.getLogger(ExeruserDaoImpl.class.getName());
	
    /**
     *
     */
    public ExeruserDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Exeruser selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Exeruser record = (Exeruser) this.queryForObject("Exeruser.selectByPK", pk);
		return record;
    }
    
    /**
     * select some record by exerid and user
     */
    public Exeruser selectByLogicPK(Long exerid, Long userid){
    	if(exerid==null || userid==null)
    		return null;
    	Exeruser vo = new Exeruser();
    	vo.setUserid(userid);
    	vo.setExerid(exerid);
		Exeruser record = (Exeruser) this.queryForObject("Exeruser.selectByLogicPK", vo);
		return record;
    }
    
    /**
     * 查询用户可以看到的练习，主要根据产品查询
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @throws Exception
     */
    public List<Exeruser> selectMyExerPage(ExeruserQuery queryVO){
        String sqlStr = "";
        if(queryVO==null){
        	return null;
        } else {
        	sqlStr = "Exeruser.selectMyExercise";
        	List<Exeruser> list = (List<Exeruser>)queryForList(sqlStr, queryVO);
        	return list;
        }
    }
    
    /**
     * 查询所有参加某次练习的所有用户
     */
    public Page selectExerUser(ExeruserQuery queryVO,int pageIndex,int pageSize,Integer total){
        if(pageIndex<=0||queryVO.getExerid()==null)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        Page page = null;
        String sqlStr = "";
        if(queryVO==null){
        	page = Page.EMPTY_PAGE;
        } else {
        	sqlStr = "Exeruser.selectExerUser";
        	page = queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
        }
        return page;
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Exeruser record){
    	if(record==null)
    		return null;
		return (Long)super.insert("Exeruser.insert", record);
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Exeruser record){
    	if(record==null||record.getExeruserid()==null)
    		return 0;
		int rows = super.update("Exeruser.updateByPK", record);
		return rows;
    }
    
    /**
     * 根据userid和exerid更新Exeruser
     */
    public int updateByLogicPK(Exeruser record, Long userid, Long exerid){
    	if(userid==null||exerid==null||record==null)
    		return 0;
    	record.setUserid(userid);
    	record.setExerid(exerid);
		int rows = super.update("Exeruser.updateByLogicPK", record);
		return rows;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Exeruser save(Exeruser record){
    	if(record==null)
    		return null;
		if(record.getExeruserid()==null||record.getExeruserid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setExeruserid(pkValue);
    		return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk){
    	if(pk==null)
    		return 0;
		int rows = super.delete("Exeruser.deleteByPK", pk);
		return rows;
    }
    
    /**
     * 删除练习人员
     * @param exerid
     * @return
     */
    public int deleteByExer(Long exerid){
    	if(exerid==null)
    		return 0;
		int rows = super.delete("Exeruser.deleteByExer", exerid);
		return rows;
    }
    
	/**
     * insertBatch records of List
     */
    public int insertBatch(List list){
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
       	rows = super.insertBatch("Exeruser.insert", list);
       	return rows;
    }
    
    /**
     * deleteBatch records by the String Array of PK
     */
    public int deleteBatchByPK(String[] pkArray){
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
    	Long[] arrs = new Long[pkArray.length];
		for(int i=0;i<pkArray.length;i++){
			if(pkArray[i]!=null)
				arrs[i] = new Long(Long.parseLong(pkArray[i]));
		}
		rows = super.deleteBatch("Exeruser.deleteByPK", arrs);
		return rows;
    }
    
    /**
     * static spring getMethod
     */
     public static ExeruserDao getInstance(){
       	 ExeruserDao dao = (ExeruserDao)BeanFactory.getBeanFactory().getBean("exeruserDao");
         return dao;
     }
    
}
