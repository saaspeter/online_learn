package netTest.paper.dao;

import java.util.Date;
import java.util.List;

import commonTool.base.BaseDaoInf;
import commonTool.base.Page;
import netTest.paper.vo.Paper;
import netTest.paper.dto.PaperQuery;

public interface PaperDao extends BaseDaoInf {
   
    /**
     * 仅仅查询试卷的基本信息，表paper
     */
    public Paper selectByPK_plain(Long pk);
	
    /**
     * select some record by PK
     */
    public Paper selectByPK(Long pk);
    
    /**
     * select records by queryVO
     */
    public List selectByVO(PaperQuery queryVO);
    
    /**
     * select records by product, it only include the basic information
     */
    public List selectByProd(Long productid, Long shopid);
    
    /**
     * select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    public Page selectByVOPage(PaperQuery queryVO,int pageIndex,int pageSize,Integer total);
    
    /**
     * 根据试卷id查询考试数量
     * @param productid
     * @param shopid
     * @return
     */
    public int countTestinfoNumber(Long paperid, Long shopid);
    
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Paper record);

    /**
     * update a record By PK
     */
    public int updateByPK(Paper record);
    
    /**
     * update the paper modifyTime and version
     */
    public int updateModInfo(Long paperid,Long shopid,Date date);
    
    /**
     * update the scores of paper
     * @param paperid
     * @param papertotalscore
     * @param updateType: 更新类型，1为分数更新为参数。2为分数做增量加减，即在原有的分数上做加法
     * @param shopid
     */
    public int updateScore(Long paperid,Float papertotalscore,int updateType,Long shopid);

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
//    public Paper save(Paper record);

    /**
     * 删除试卷包括试卷属性，试卷属性，试卷子题目，试卷试题答案表，试卷题型表，试卷题型比例表，引用试卷题目
     * @param pk:试卷id
     */
    public int deleteByPK(Long pk, Short genetype);
        
    /**
     * 调用存储过程，根据试卷的配置，生成试卷题目
     * @param paperid
     * @return
     */
    public Long genePaperQues(Long paperid);
    
    /**
     * 根据paper自动更新该份试卷的总分数
     * @param paperid
     * @param shopid
     */
    public void autoUpdateScore(Long paperid, Long shopid);
    
	/**
	 * 得到该pk所属的容器id(orgID)
	 * @param pk
	 * @return
	 */
	public Long getInContainer(Long pk);
	
}
