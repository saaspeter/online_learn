package netTest.orguser.dao.impl;

import java.util.ArrayList;
import java.util.List;

import netTest.bean.BeanFactory;
import netTest.orguser.dao.OrguserDao;
import netTest.orguser.dto.OrguserQuery;
import netTest.orguser.vo.Orguser;

import org.apache.log4j.Logger;

import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.constant.CommonConstant;
import commonTool.exception.DaoException;

public class OrguserDaoImpl extends BaseDao implements OrguserDao {

	static Logger log = Logger.getLogger(OrguserDaoImpl.class.getName());
	
    /**
     *
     */
    public OrguserDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK，仅查出orguser表中的字段
     */
    public Orguser selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Orguser record = (Orguser) this.queryForObject("Orguser.selectByPK_orig", pk);
		return record;
    }
    
    /**
     * 查询出该用户的综合信息，包括用户表等信息，但不包括用户扩展信息等
     */
    public Orguser qryOrguserByPK(Long pk) {
    	if(pk==null)
    		return null;
		Orguser record = (Orguser) this.queryForObject("Orguser.selectByPK", pk);
		return record;
    }
    
       
    /**
     * select records by queryVO，查得的vo对应orguser表中的字段
     */
    public List selectByVO(OrguserQuery queryVO) {
		if(queryVO==null)
			return new ArrayList();
		List list = this.queryForList("Orguser.selectByVO", queryVO);
		return list;
    }
    
    /**
     * 查询user对应的org信息，一个user只能在一个org中
     */
    public Orguser selectOrgForUser(Long userid, Long shopid){
    	OrguserQuery queryVO = new OrguserQuery();
    	queryVO.setUserid(userid);
    	queryVO.setShopid(shopid);
    	Orguser vo = (Orguser)this.queryForObject("Orguser.selectOrgForUser", queryVO);
		return vo;
    }
        
    /**
     * select page by queryVO ，查得的vo对应orguser表中的字段
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    public Page selectByVOPage(OrguserQuery queryVO,int pageIndex,int pageSize,Integer total) {
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        String sqlStr = "Orguser.selectByVO";
        if(queryVO==null)
        	return Page.EMPTY_PAGE;
        
        return queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
    }
    
    
    /**
     * 查询用户的分页详细信息，来自usershop,orgbase,user
     * @param queryVO
     * @param pageIndex
     * @param pageSize
     * @return
     * @throws Exception
     */
    public Page selectUserByVOPage(OrguserQuery queryVO,int pageIndex,int pageSize,Integer total){
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        String sqlStr = "Orguser.selectUserByVO";
        return queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
    }
        
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Orguser record) {
    	if(record==null)
    		return null;
 		return (Long)super.insert("Orguser.insert", record);
     }   

    
	/**
     * insertBatch records of List
     */
    public int insertBatch(List list) {
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
        rows = super.insertBatch("Orguser.insert", list);
        return rows;
    }
    
    /**
     * updateBatch records of List
     */
    public int updateBatch(List list) {
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
       	rows = super.updateBatch("Orguser.updateByPK", list);
       	return rows;
    }
    
    /**
     * 更新传入用户的单位，一般用于人员转单位
     * @param useridStr
     * @param newDeptid
     * @return
     */
    public int updateDept(Long userid,Long oldDeptid, Long newDeptid, String orgpath){
    	if(userid==null||newDeptid==null)
    		return 0;
    	OrguserQuery queryvo = new OrguserQuery();
    	queryvo.setUserid(userid);
    	queryvo.setOrgbaseid(oldDeptid);
    	queryvo.setNeworgbaseid(newDeptid);
    	queryvo.setOrgpath(orgpath);
    	int rows = super.update("Orguser.updateOrg", queryvo);
    	return rows;
    }
   
   
    /**
     * 根据用户和商店删除人员信息，可以删除单位人员和小组人员信息
     * @param userid
     * @param shopid
     * @return
     */
    public int delOrguser(Long userid,Long shopid){
    	if(userid==null||shopid==null)
    		return 0;
    	Orguser vo = new Orguser();
    	vo.setUserid(userid);
    	vo.setShopid(shopid);
    	int rows = super.delete("Orguser.delOrguser", vo);
    	return rows;
    }
    
        
    /**
     * static spring getMethod
     */
     public static OrguserDao getInstance() {
         try{
        	 OrguserDao dao = (OrguserDao)BeanFactory.getBeanFactory().getBean("orguserDaoProxy");
             return dao;
         }catch(Exception e) {
        	 log.error("OrguserDaoImpl方法getInstance()时出错误!", e);
             throw new DaoException(e);
         }
     }
     
     public static void main(String[] args) throws Exception{
    	 //OrguserDao dao = OrguserDaoImpl.getInstance();
     }
    
}
