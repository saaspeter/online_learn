package netTest.orguser.dao.impl;

import java.util.List;

import netTest.bean.BeanFactory;
import netTest.orguser.constant.OrgbaseConstant;
import netTest.orguser.dao.OrgbaseDao;
import netTest.orguser.dto.OrgbaseQuery;
import netTest.orguser.vo.Orgbase;

import org.apache.log4j.Logger;

import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.constant.CommonConstant;

public class OrgbaseDaoImpl extends BaseDao implements OrgbaseDao {

	static Logger log = Logger.getLogger(OrgbaseDaoImpl.class.getName());
	
    /**
     *
     */
    public OrgbaseDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Orgbase selectByPK(Long pk) {
    	if(pk==null)
    		return null;
		Orgbase record = (Orgbase) this.queryForObject("Orgbase.selectByPK", pk);
		return record;	
    }
    
    
    /**
     * select all records
     * @return
     */
    public List selectAll() {
		List list = this.queryForList("Orgbase.selectAll", null);
		return list;
    }
        
    /**
     * select records by queryVO
     */
    public List selectByVO(OrgbaseQuery queryVO) {
		if(queryVO==null)
			return selectAll();
		List list = this.queryForList("Orgbase.selectByVO", queryVO);
		return list;
    }
    
    /**
     * select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    public Page selectByVOPage(OrgbaseQuery queryVO,int pageIndex,int pageSize,Integer total) {
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        String sqlStr = "";
        if(queryVO==null)
        	sqlStr = "Orgbase.selectAll";
        else 
        	sqlStr = "Orgbase.selectByVO";
        return queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
    }
    
    /**
     * select vos by QueryVO,the vo includes the childnum which is the children of a org
     * @param queryVO
     * @return
     * @throws Exception
     */
    public List selectByVOChildnum(OrgbaseQuery queryVO) {
    	if(queryVO==null){
    		queryVO = new OrgbaseQuery();
    	    queryVO.setPid(OrgbaseConstant.OrgPidTop);
    	}
		List list = this.queryForList("Orgbase.selectByVOChildnum", queryVO);
		return list;
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Orgbase record) {
    	if(record==null)
    		return null;
    	if(record.getPid()==null){
    		record.setPid(OrgbaseConstant.OrgPidTop);
    		record.setPath("");
    		record.setOrglevel(0);
    	}else if(record.getOrglevel()!=null){
    		record.setOrglevel(record.getOrglevel()+1);
    	}  
    	Long pk = null;
    	pk = (Long)super.insert("Orgbase.insert", record);
    	record.setOrgbaseid(pk);
		// 更新orgbase中的单位路径path
		record.setPath((record.getPath()==null?"":(record.getPath())+","+String.valueOf(pk)));
		super.update("Orgbase.updatePathByPK", record);
		return pk;
    }
    
    /**
     * 查找该单位的所有上级单位vo，包括本单位vo
     * @param orgbaseid
     * @return
     * @throws Exception
     */
    public List getTopOrgs(Long orgbaseid){
    	List list = null;
    	if(orgbaseid==null)
    		return list;
    	Orgbase vo = this.selectByPK(orgbaseid);
    	if(vo!=null&&vo.getPath()!=null&&vo.getPath().trim().length()>0){
    		OrgbaseQuery queryVO = new OrgbaseQuery();
    		queryVO.setOrgpathStr(vo.getPath());
    		queryVO.setOrder_By_Clause("orgLevel");
    		list = this.selectByVO(queryVO);
    	}
    	return list;
    }
    
    /**
     * update a record By PK
     */
    public int updateByPK(Orgbase record) {
    	if(record==null||record.getOrgbaseid()==null)
    		return 0;
		int rows = super.update("Orgbase.updateByPK", record);
		return rows;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Orgbase save(Orgbase record) {
    	if(record==null)
    		return null;
		if(record.getOrgbaseid()==null||record.getOrgbaseid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setOrgbaseid(pkValue);
			return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk) {
    	if(pk==null)
    		return 0;
		int rows = super.delete("Orgbase.deleteByPK", pk);
		return rows;
    }
    
    /**
     * delete records by queryVO
     */
    public int deleteByVO(OrgbaseQuery queryVO) {
    	if(queryVO==null)
    		return 0;
		int rows = super.delete("Orgbase.deleteByVO",queryVO);
		return rows;
    }
    
	/**
     * insertBatch records of List
     */
    public int insertBatch(List list) {
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
    	rows = super.insertBatch("Orgbase.insert", list);
    	return rows;
    }
    
    /**
     * updateBatch records of List
     */
    public int updateBatch(List list) {
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
    	rows = super.updateBatch("Orgbase.updateByPK", list);
    	return rows;
    }
    
    /**
     * deleteBatch records by the Long Array of PK
     */
    public int deleteBatchByPK(Long[] pkArray) {
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
    	rows = super.deleteBatch("Orgbase.deleteByPK", pkArray);
    	return rows;
    }
    
    /**
     * deleteBatch records by the String Array of PK
     */
    public int deleteBatchByPK(String[] pkArray) {
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
    	Long[] arrs = new Long[pkArray.length];
		for(int i=0;i<pkArray.length;i++){
			if(pkArray[i]!=null)
				arrs[i] = new Long(Long.parseLong(pkArray[i]));
		}
		rows = this.deleteBatchByPK(arrs);
		return rows;
    	
    }
    
    /**
     * static spring getMethod
     */
     public static OrgbaseDao getInstance() {
    	 OrgbaseDao dao = (OrgbaseDao)BeanFactory.getBeanFactory().getBean("orgbaseDaoProxy");
         return dao;
      }
    
}
