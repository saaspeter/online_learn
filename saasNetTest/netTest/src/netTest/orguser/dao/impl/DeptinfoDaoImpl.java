package netTest.orguser.dao.impl;

import java.util.ArrayList;
import java.util.List;

import netTest.bean.BeanFactory;
import netTest.orguser.constant.DeptinfoConstant;
import netTest.orguser.constant.OrgbaseConstant;
import netTest.orguser.dao.DeptinfoDao;
import netTest.orguser.dto.DeptinfoQuery;
import netTest.orguser.vo.Deptinfo;

import org.apache.log4j.Logger;

import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.constant.CommonConstant;

public class DeptinfoDaoImpl extends BaseDao implements DeptinfoDao {

	static Logger log = Logger.getLogger(DeptinfoDaoImpl.class.getName());
	
    /**
     *
     */
    public DeptinfoDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Deptinfo selectByPK(Long pk) {
    	if(pk==null)
    		return null;
		Deptinfo record = (Deptinfo) this.queryForObject("Deptinfo.selectByPK", pk);
		return record;
    }
            
    /**
     * select records by queryVO
     */
    public List selectByVO(DeptinfoQuery queryVO) {
		if(queryVO==null)
			return new ArrayList();
		List list = this.queryForList("Deptinfo.selectByVO", queryVO);
		return list;
    }
    
    /**
     * select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    public Page selectByVOPage(DeptinfoQuery queryVO,int pageIndex,int pageSize,Integer total) throws Exception {
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        String sqlStr = "";
        if(queryVO==null)
        	sqlStr = "Deptinfo.selectAll";
        else 
        	sqlStr = "Deptinfo.selectByVO";
        try{
	        return queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
        }catch(Exception e) {
            log.error("DeptinfoDaoImpl分页查询selectByVOPage时出错误!", e);
			throw e ;
        }
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Deptinfo record) {
    	if(record==null||record.getShopid()==null)
    		return null;
    	if(record.getPid()==null){
    		record.setPid(OrgbaseConstant.OrgPidTop);
    		record.setPath("");
    		record.setOrglevel(0);
    	}else if(record.getOrglevel()!=null){
    		record.setOrglevel(record.getOrglevel()+1);
    	}   		

        record.setIssetfornew(DeptinfoConstant.IsSetForNew_notSet);
    	Long pk = (Long)super.insert("Orgbase.insert", record);
    	record.setOrgbaseid(pk);
		super.insert("Deptinfo.insert", record);
		// 更新orgbase中的单位路径path
		String path = "";
		if(OrgbaseConstant.OrgPidTop.equals(record.getPid())){
			path = String.valueOf(pk);
		}else{
			path = record.getPath()+","+String.valueOf(pk);
		}
		record.setPath(path);
		super.update("Orgbase.updatePathByPK", record);
		// 写入单位层级关系
		super.insert("Deptinfo.insertRel", record);
		return pk;

    }

    /**
     * update a record By PK
     */
    public int updateByPK(Deptinfo record) throws Exception {
    	if(record==null||record.getOrgbaseid()==null)
    		return 0;
        try {
        	int rows = super.update("Orgbase.updateByPK", record);
			if(record.getDeptchildnum()!=null&&record.getDeptchildnum().intValue()>0)
        	   super.update("Deptinfo.updateByPK", record);
			return rows;
        }catch(Exception e) {
            log.error("DeptinfoDaoImpl更新updateByPK时出错误!", e);
			throw e ;
        }
    }
    
    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Deptinfo save(Deptinfo record) throws Exception {
    	if(record==null)
    		return null;
    	try {
			if(record.getOrgbaseid()==null||record.getOrgbaseid().intValue()==0){
				Long pkValue = this.insert(record);
				record.setOrgbaseid(pkValue);
				return record;
			}else{
				this.updateByPK(record);
				return record;
			}
		} catch (RuntimeException e) {
			log.error("DeptinfoDaoImpl保存save时出错误!", e);
			throw e ;
		}
    }

    /**
     * delete a record by PK 
     */
    //TODO 在删除rel关系表的上下级关系时，在多级删除时有可能出现部分垃圾数据不能被删除。....
    public int deleteByPK(Long pk) throws Exception {
    	if(pk==null)
    		return 0;
        try {
			int rows = super.delete("Deptinfo.deleteByPK", pk);
			super.delete("Orgbase.deleteByPK", pk);
          //  两个删除的顺序不能颠倒，因为前一个删除需要查询表productcategoryrl找到该记录的所有下级记录，
			// 因此两张表不能建立约束关系
			super.delete("Deptinfo.deleteRel", pk);
			return rows;
        }catch(Exception e) {
            log.error("DeptinfoDaoImpl删除deleteByPK时出错误!", e);
			throw e ;
        }
    }
    
    /**
     * delete records by queryVO
     */
    public int deleteByVO(DeptinfoQuery queryVO) throws Exception {
    	if(queryVO==null)
    		return 0;
        try {
        	int rows = 0;
        	List list = this.selectByVO(queryVO);
        	if(list!=null&&list.size()>0)
        	   for(int i=0;i<list.size();i++){
        	      Long pk = ((Deptinfo)list.get(i)).getOrgbaseid();
        	      this.deleteByPK(pk);
        	   }
			return rows;
        }catch(Exception e) {
            log.error("DeptinfoDaoImpl删除deleteByVO时出错误!", e);
			throw e ;
        }
    }
    
	/**
     * insertBatch records of List
     */
    public int insertBatch(List list) throws Exception {
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
        try {
        	String[][] sqlDefs = new String[][]{{"Orgbase.insert",null},{"Deptinfo.insert",null},
        			                            {"Deptinfo.insertRel",null}};
        	rows = insertBatchMutiTable(sqlDefs,list,"orgbaseid");
        	return rows;
        }catch(Exception e) {
            log.error("DeptinfoDaoImpl批量新增insertBatch(List list)时出错误!", e);
			throw e ;
        }
    }
    
    /**
     * updateBatch records of List
     */
    public int updateBatch(List list) throws Exception {
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
        try {
        	String[] sqlDefs = new String[]{"Orgbase.updateByPK","Deptinfo.updateByPK"};
        	rows = super.updateBatchMutiTable(sqlDefs, list);
        	return rows;
        }catch(Exception e) {
            log.error("DeptinfoDaoImpl批量修改updateBatch(List list)时出错误!", e);
			throw e ;
        }
    }
    
    /**
     * deleteBatch records by the Long Array of PK
     */
    public int deleteBatchByPK(Long[] pkArray) throws Exception {
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
        try {
        	String[] sqlDefs = new String[]{"Deptinfo.deleteByPK","Orgbase.deleteByPK","Deptinfo.deleteRel"};
        	rows = super.deleteBatchMutiTable(sqlDefs, pkArray);
        	// 返回的删除数量不准确，因为是批量删除，所以得不到正确的逻辑删除条数
        	return pkArray.length;
        }catch(Exception e) {
            log.error("DeptinfoDaoImpl删除deleteBatchByPK(Long[] pkArray)时出错误!", e);
			throw e ;
        }
    }
    
    /**
     * deleteBatch records by the String Array of PK
     */
    public int deleteBatchByPK(String[] pkArray) throws Exception {
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
    	Long[] arrs = new Long[pkArray.length];
    	try {
			for(int i=0;i<pkArray.length;i++){
				if(pkArray[i]!=null)
					arrs[i] = new Long(Long.parseLong(pkArray[i]));
			}
			rows = this.deleteBatchByPK(arrs);
			return rows;
		} catch (NumberFormatException e) {
			log.error("DeptinfoDaoImpl删除deleteBatchByPK(String[] pkArray)时出现转换错�?!", e);
			throw new Exception("NumberFormatException：from String to Long!") ;
		}catch(Exception e) {
            log.error("DeptinfoDaoImpl删除deleteBatchByPK(String[] pkArray)时出错误!", e);
			throw e ;
        }
    	
    }
    
    /**
     * static spring getMethod
     */
     public static DeptinfoDao getInstance() {
       	 DeptinfoDao dao = (DeptinfoDao)BeanFactory.getBeanFactory().getBean("deptinfoDaoProxy");
         return dao;
     }
    
}
