package netTest.order.dao.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import netTest.bean.BeanFactory;
import netTest.order.dao.CustorderDao;
import netTest.order.dto.CustorderQuery;
import netTest.order.vo.Custorder;
import netTest.order.vo.SequenceOrderCode;

import org.apache.log4j.Logger;

import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.constant.CommonConstant;
import commonTool.exception.DaoException;

public class CustorderDaoImpl extends BaseDao implements CustorderDao {

	static Logger log = Logger.getLogger(CustorderDaoImpl.class.getName());
	
    /**
     *
     */
    public CustorderDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Custorder selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Custorder record = (Custorder) this.queryForObject("Custorder.selectByPK", pk);
		return record;
    }
    
    /**
     * 查询完整的订单信息，包括：订单的审批和说明内容
     */
    public Custorder qryWholeByPK(Long pk){
    	if(pk==null)
    		return null;
		Custorder record = (Custorder) this.queryForObject("Custorder.qryWholeByPK", pk);
		
		return record;
    }
        
    /**
     * select records by queryVO
     */
    public List selectByVO(CustorderQuery queryVO){
		if(queryVO==null)
			return new ArrayList();
		List list = this.queryForList("Custorder.selectByVO", queryVO);
		return list;
    }
    
    /**
     * 查询数量
     */
    public Integer selectCount(CustorderQuery queryVO){
		if(queryVO==null)
			return 0;
		Integer retsult = (Integer)this.queryForObject("Custorder.selectByVOCount", queryVO);
		return retsult;
    }
    
    /**
     * select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws DaoException
     */
    public Page selectByVOPage(CustorderQuery queryVO,int pageIndex,int pageSize,Integer total){
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        String sqlStr = "Custorder.selectByVO";
        if(queryVO==null)
        	return Page.EMPTY_PAGE;
        return queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Custorder record){
    	if(record==null)
    		return null;
		Long pk = (Long)super.insert("Custorder.insert", record);
		record.setOrderid(pk);
		super.insert("Custorder.insertOrderExt", record);
		return pk;
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Custorder record){
    	if(record==null||record.getOrderid()==null)
    		return 0;
		int rows = super.update("Custorder.updateByPK", record);
		return rows;
    }
    
    /**
     * 更改订单的支付状态
     * @param orderid
     * @param paystatus
     * @return
     * @throws DaoException
     */
    public boolean updatePayStatus(Long orderid,Short paystatus){
    	if(orderid==null||paystatus==null)
    		return false;
    	Custorder record = new Custorder();
    	record.setOrderid(orderid);
    	record.setPaystatus(paystatus);
    	int count = updateByPK(record);
    	if(count>0)
    		return true;
    	else
    		return false;
    }
    
    /**
     * 更改订单状态
     * @param orderid
     * @param paystatus
     * @return
     * @throws DaoException
     */
    public boolean updateOrderStatus(Long orderid, Short orderstatus, Date approvedate, 
    		String appnotes, Long operatorid){
    	if(orderid==null||orderstatus==null)
    		return false;
    	Custorder record = new Custorder();
    	record.setOrderid(orderid);
    	record.setOrderstatus(orderstatus);
    	record.setApprovedate(approvedate);
    	record.setOperatorid(operatorid);
    	int count = updateByPK(record);
    	// 更新custorderExt表
    	if(appnotes!=null && appnotes.trim().length()>0){
    		record.setAppnotes(appnotes);
    	    updateOrderExt(record);
    	}
    	if(count>0)
    		return true;
    	else
    		return false;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws DaoException
     */
    public Custorder save(Custorder record){
    	if(record==null)
    		return null;
		if(record.getOrderid()==null||record.getOrderid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setOrderid(pkValue);
			return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }
    
    /**
     * 生成订单编码，如果长度小于10位则在前面补0凑够10位，如果大于10位直接返回
     * @return
     * @throws DaoException
     */
    public String geneOrderCode(){
   		String code = "";
   		SequenceOrderCode vo = new SequenceOrderCode();
   		Long codeLong = (Long)super.insert("Custorder.geneOrderCode", vo);
   		if(codeLong!=null)
   			code = codeLong.toString();
   		int length = code.length();
		if(code.length()<10)
		   for(int i=0;i<10-length;i++)
			   code = "0"+code;
		return code;
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk){
    	if(pk==null)
    		return 0;
    	super.delete("Custorder.delOrderExt", pk);
		int rows = super.delete("Custorder.deleteByPK", pk);
		return rows;
    }
        
	/**
     * insertBatch records of List
     */
    public int insertBatch(List list){
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
       	rows = super.insertBatchMutiTable(
       			new String[][]{{"Custorder.insert",null}, {"Custorder.insertOrderExt",null}}, 
       			list, "orderid");
       	return rows;
    }
    
    /**
     * updateBatch records of List
     */
    public int updateBatch(List list){
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
       	rows = super.updateBatch("Custorder.updateByPK", list);
       	return rows;
    }
        
    /**
     * deleteBatch records by the Long Array of PK
     */
    public int deleteBatchByPK(Long[] pkArray){
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
       	rows = super.deleteBatchMutiTable(
       			new String[]{"Custorder.delOrderExt","Custorder.deleteByPK"},
       			pkArray);
       	return rows;
    }
    
    /**
     * deleteBatch records by the String Array of PK
     */
    public int deleteBatchByPK(String[] pkArray){
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
    	Long[] arrs = new Long[pkArray.length];
		for(int i=0;i<pkArray.length;i++){
			if(pkArray[i]!=null)
				arrs[i] = new Long(Long.parseLong(pkArray[i]));
		}
		rows = this.deleteBatchByPK(arrs);
		return rows;
    }
    
    /**
     * select orderExt info by orderid
     */
    public Custorder qryOrderExtByPK(Long orderid){
    	if(orderid==null)
    		return null;
		Custorder record = (Custorder) this.queryForObject("Custorder.qryOrderExtByPK", orderid);
		return record;
    }
    
    /**
     * update a order ext info by pk
     */
    public int updateOrderExt(Custorder record){
    	if(record==null||record.getOrderid()==null)
    		return 0;
		int rows = super.update("Custorder.updateOrderExt", record);
		return rows;
    }
    
    
    /**
     * static spring getMethod
     */
     public static CustorderDao getInstance(){
      	 CustorderDao dao = (CustorderDao)BeanFactory.getBeanFactory().getBean("custorderDao");
         return dao;
     }
    
}
