package netTest.wareques.dao.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import netTest.bean.BeanFactory;
import netTest.exception.ExceptionConstant;
import netTest.wareques.dao.QuesanswerDao;
import netTest.wareques.dao.QuestionDao;
import netTest.wareques.dao.WareDao;
import netTest.wareques.dto.QuestionQuery;
import netTest.wareques.vo.Quesanswer;
import netTest.wareques.vo.Question;
import netTest.wareques.vo.Questionitem;
import netTest.wareques.vo.Ware;

import org.apache.log4j.Logger;

import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.constant.CommonConstant;
import commonTool.exception.LogicException;
import commonTool.util.StringUtil;

public class QuestionDaoImpl extends BaseDao implements QuestionDao {

	static Logger log = Logger.getLogger(QuestionDaoImpl.class.getName());
	
	private QuesanswerDao quesanswerDao;
	
    /**
     *
     */
    public QuestionDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Question selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Question record = (Question) this.queryForObject("Question.selectByPK", pk);
		return record;
    }
    
    /**
     * 根据父题目id查询所有的子题目
     * @param pid
     * @return
     */
    public List<Question> selectByPid(Long pid){
    	if(pid==null)
    		return null;
    	List<Question> list = (List<Question>)this.queryForList("Question.selectByPid", pid);
    	return list;
    }
    
    /**
     * select by pk string, include its anwserVO
     * @param selectByPkStr
     * @return
     */
    public Map<Long, Question> selectByPkStr(String selectByPkStr){
		if(selectByPkStr==null)
			return new HashMap<Long, Question>();
		selectByPkStr = StringUtil.trimComma(selectByPkStr);
		Map<Long, Question> map = new HashMap<Long, Question>();
		if(selectByPkStr!=null && !"".equals(selectByPkStr)){
			List<Question> list = this.queryForList("Question.selectByPkStr", selectByPkStr);
			if(list!=null && list.size()>0){
				// search for ques answer
				Map<Long, Quesanswer> quesanswerMap = quesanswerDao.selectByPkStr(selectByPkStr);
				
			    Question vo = null;
			    for(int i=0;i<list.size();i++){
				   vo = (Question)list.get(i);
				   if(quesanswerMap!=null){
					  vo.setAnswerVO(quesanswerMap.get(vo.getQuesid()));
				   }
				   map.put(vo.getQuesid(), vo);
			    }
			}
		}
		return map;
    }

    /**
     * operator select records by queryVO 
     */
    public List<Question> qryList(QuestionQuery queryVO){
		if(queryVO==null)
			return new ArrayList<Question>();
		List<Question> list = (List<Question>)this.queryForList("Question.selectByVO", queryVO);
		return list;
    }
     
    /**
     * operator select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    public Page qryPage(QuestionQuery queryVO,int pageIndex,int pageSize,Integer total){
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        Page page = null;
        String sqlStr = "";
        if(queryVO==null){
        	page = Page.EMPTY_PAGE;
        } else {
        	sqlStr = "Question.selectByVO";
        	page = queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
        	if(page!=null && page.getList()!=null){
        		Question voTemp = null;
        		Ware wareVO = null;
        		WareDao wareDao = WareDaoImpl.getInstance();
        		for(int i=0; i<page.getList().size(); i++){
        			voTemp = (Question)page.getList().get(i);
        			wareVO = wareDao.selectByPK(voTemp.getWareid());
        			voTemp.setWarename(wareVO.getWarename());
        		}
        	}
        }
        return page;
    }
    

    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Question record){
    	if(record==null)
    		return null;
		Long pk = (Long)super.insert("Question.insert", record);
		record.setQuesid(pk);
		return pk;
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Question record){
    	if(record==null||record.getQuesid()==null)
    		return 0;
		int rows = super.update("Question.updateByPK", record);
		return rows;
    }
    
    /**
     * 更新题目的子题目个数quesOptNum字段
     * @param quesid
     * @param num
     * @return
     */
    public int updateQuesOptNum(Long quesid, int num){
    	if(quesid==null)
    		return 0;
    	Question record = new Question();
    	record.setQuesid(quesid);
    	record.setQuesoptnum(num);
    	int rows = super.update("Question.updateQuesOptNum", record);
		return rows;
    }
    
    /**
     * 更新问题的文件链接地址
     * @param quesid
     * @param fileurl
     * @return
     */
    public boolean updateFileurl(Long quesid, String fileurl){
    	boolean result = true;
    	if(quesid!=null){
    		Question vo = new Question();
    		vo.setQuesid(quesid);
    		vo.setFileurl(fileurl);
    		int rows = super.update("Question.updateFileurl", vo);
    		if(rows<=0)
    			result = false;
    	}else
    		result = false;
    	return result;
    }
    
    /**
     * update the record if exists pk, else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Question save(Question record){
    	if(record==null)
    		return null;
		if(record.getQuesid()==null||record.getQuesid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setQuesid(pkValue);
			return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk){
    	if(pk==null)
    		return 0;		
        // 删除该题目下的题目选项
		super.delete("Questionitem.deleteByQuesid", pk);
		super.delete("Quesanswer.deleteByPK", pk); // 删除题目答案
		//super.delete("Wareques.deleteByPK", pk);
		int rows = super.delete("Question.deleteByPK", pk);
		
		return rows;
    }
    
    /**
     * 根据product删除题目
     * @param productid
     * @return
     */
    public int deleteByProd(Long productid){
    	if(productid==null)
    		throw new LogicException(ExceptionConstant.Error_Need_Paramter);		
        // 删除该题目下的题目选项
		super.delete("Question.delQuesitemByProd", productid);
		super.delete("Question.delQuesanswerByProd", productid); // 删除题目答案
		int rows = super.delete("Question.delQuesByProd", productid);
		return rows;
    }

    /**
     * 根据主问题id删除其下的子问题，包括Questionitem,Quesanswer,Question
     * @param pid
     * @return
     */
    public int delSubquesByPid(Long pid){
    	super.delete("Questionitem.delSubquesitemByPid", pid);
     	super.delete("Quesanswer.delByPid", pid); // 删除题目答案
    	int rows = super.delete("Question.delByPid", pid);
    	return rows;
    }
    
	/**
     * insertBatch records of List
     */
    public int insertBatch(List<Question> list){
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
    	//TODO 需要用批量处理
    	Question voTemp = null;
    	Long pk = null;
    	for(int i=0;i<list.size();i++){
    		voTemp = (Question)list.get(i);
    		pk = (Long)super.insert("Question.insert", voTemp);
    		voTemp.setQuesid(pk);
    		if(voTemp.getItemList()!=null){
    			Questionitem itemVO = null;
    			for(int j=0;j<voTemp.getItemList().size();j++){
    				itemVO = (Questionitem)voTemp.getItemList().get(j);
    				itemVO.setQuesitemid(null);
    				itemVO.setQuesid(pk);
    			}
    			super.insertBatchMutiTable(new String[][]{{"Questionitem.insert",null}}, voTemp.getItemList(), "quesitemid");
    		}
    		if(voTemp.getAnswerVO()!=null){
    			voTemp.getAnswerVO().setQuesid(pk);
    			super.insert("Quesanswer.insert", voTemp.getAnswerVO());
    		}
    	}
    	rows = list.size();
//    	rows = super.insertBatchMutiTable(
//       			new String[][]{{"Question.insert",null}, 
//       					       {"Questionitem.insert","itemList"},
//       					       {"Quesanswer.insert","answerVO"}}, 
//       			list, "quesid");
       	return rows;
    }
    
    /**
     * deleteBatch records by the String Array of PK
     */
    public int deleteBatchByPK(String[] pkArray){
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
    	Long[] arrs = new Long[pkArray.length];
		for(int i=0;i<pkArray.length;i++){
			if(pkArray[i]!=null)
				arrs[i] = new Long(Long.parseLong(pkArray[i]));
		}
		rows = super.deleteBatch("Question.deleteByPK", arrs);
		return rows;
    }
    
    public QuesanswerDao getQuesanswerDao() {
		return quesanswerDao;
	}

	public void setQuesanswerDao(QuesanswerDao quesanswerDao) {
		this.quesanswerDao = quesanswerDao;
	}

	/**
     * static spring getMethod
     */
     public static final QuestionDao getInstance(){
       	 QuestionDao dao = (QuestionDao)BeanFactory.getBeanFactory().getBean("questionDao");
         return dao;
     }
    
}
