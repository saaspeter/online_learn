package netTest.wareques.dao.impl;

import java.util.ArrayList;
import java.util.List;

import netTest.bean.BeanFactory;
import netTest.wareques.dao.QuestionitemDao;
import netTest.wareques.vo.Questionitem;

import org.apache.log4j.Logger;

import commonTool.base.BaseDao;

public class QuestionitemDaoImpl extends BaseDao implements QuestionitemDao {

	static Logger log = Logger.getLogger(QuestionitemDaoImpl.class.getName());
	
	private String table = "Questionitem";
	
    /**
     *
     */
    public QuestionitemDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Questionitem selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Questionitem record = (Questionitem) this.queryForObject(table+".selectByPK", pk);
		return record;
    }
    
    /**
     * select records by queryVO
     */
    public List selectByVO(Questionitem queryVO){
		if(queryVO==null)
			return new ArrayList();
		List list = this.queryForList(table+".selectByVO", queryVO);
		return list;
    }
    
    /**
     * select records by quesid
     */
    public List selectByQues(Long quesid,Long shopid){
		if(quesid==null)
			return new ArrayList();
		Questionitem queryVO = new Questionitem();
		queryVO.setQuesid(quesid);
		queryVO.setShopid(shopid);
		queryVO.setOrder_By_Clause(" disOrder ");
		List list = this.queryForList(table+".selectByQues", queryVO);
		return list;
    }
    
    /**
     * select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
//    public Page selectByVOPage(Questionitem queryVO,int pageIndex,int pageSize,Integer total){
//        if(pageIndex<=0)
//        	pageIndex = 1;
//        if(pageSize<=0)
//        	pageSize = CommonConstant.PAGESIZE;
//        Page page = null;
//        String sqlStr = "";
//        if(queryVO==null){
//        	page = Page.EMPTY_PAGE;
//        } else {
//        	sqlStr = table+".selectByVO";
//        	page = queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
//        }
//	    return page;
//    }
    
    /**
     * select records withoutBlobs by queryVO
     */
//    public List selectByVOWithoutBLOBs(Questionitem queryVO){
//		if(queryVO==null)
//			return new ArrayList();
//		List list = this.queryForList(table+".selectByVOWithoutBLOBs", queryVO);
//		return list;
//    }
    
    /**
     * select page without blobs by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
//    public Page selectByVOWithoutBLOBsPage(Questionitem queryVO,int pageIndex,int pageSize,Integer total){
//        if(pageIndex<=0)
//        	pageIndex = 1;
//        if(pageSize<=0)
//        	pageSize = CommonConstant.PAGESIZE;
//        Page page = null;
//        String sqlStr = "";
//        if(queryVO==null){
//        	page = Page.EMPTY_PAGE;
//        } else {
//        	sqlStr = table+".selectByVOWithoutBLOBs";
//        	page = queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
//        }
//        return page;
//    }

    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Questionitem record){
    	if(record==null)
    		return null;
		return (Long)super.insert(table+".insert", record);
    }
    
    /**
     * 得到字段quesItemFlag的下一个序列值，通过查询表SEQ_QuesItemFlag得到
     * 返回的该序列值的负值
     * @return
     */
    public String qryItemFlagSEQ(){
    	Long seq = (Long)super.insert("Questionitem.qryItemFlagSEQ", "");
        if(seq==null)
        	seq = 0l;
        return String.valueOf(-seq);
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Questionitem record){
    	if(record==null||record.getQuesitemid()==null)
    		return 0;
		int rows = super.update(table+".updateByPK", record);
		return rows;
    }
    
    /**
     * 更新问题选项的文件链接地址
     * @param quesid
     * @param fileurl
     * @return
     */
    public boolean updateFileurl(Long itemid,String fileurl){
    	boolean result = true;
    	if(itemid!=null){
    		Questionitem vo = new Questionitem();
    		vo.setQuesitemid(itemid);
    		vo.setFileurl(fileurl);
    		int rows = super.update(table+".updateFileurl", vo);
    		if(rows<=0)
    			result = false;
    	}else
    		result = false;
    	return result;
    }
    
    /**
     * 更换两个题目的题目选项的disorder
     * @param vo
     * @param type:1代表向上移动(disorder变小)，2代表向下移动
     * @return
     */
    public boolean switDisorderQues(Questionitem vo,int type){
    	boolean result = true;
    	if(vo!=null&&vo.getQuesid()!=null&&vo.getDisorder()!=null)
    	{   		
    		Integer disorder_switch = null;
    		Integer disorder = vo.getDisorder();
    		if(type==1){
    			disorder_switch = (Integer) this.queryForObject(table+".qrySmallerDisorder", vo);
    		}else if(type==2){
    			disorder_switch = (Integer) this.queryForObject(table+".qryLargerDisorder", vo);
    		}
    		if(disorder_switch!=null){
    			// 首先把要更改的题目A的disorder设置为-1
    			vo.setDisorderSwitch(-1);
    			super.update(table+".updateDisorder", vo);
    			// 再把要调换题目顺序的题目B的disorder设置为A的disorder
    			vo.setDisorder(disorder_switch);
    			vo.setDisorderSwitch(disorder);
    			super.update(table+".updateDisorder", vo);
    			// 设置A的属性为disorder_switch
    			vo.setDisorder(-1);
    			vo.setDisorderSwitch(disorder_switch);
    			super.update(table+".updateDisorder", vo);
    		}else
    			result = false;
    	}else
    		result = false;
    	return result;
    }

    /**
     * 根据子题目选项id和显示序号查询比指定disorder略大的显示序号
     * 如果disorder为空，则查询所属的quesid下的子选项中最大的显示号disorder
     * @param quesid
     * @param disorder
     * @return
     */
    public Integer qryLargerDisorder(Long quesid,Integer disorder){
    	if(quesid==null)
    		return null;
    	Questionitem vo = new Questionitem();
    	vo.setQuesid(quesid);
    	vo.setDisorder(disorder);
    	Integer rtn = (Integer) this.queryForObject(table+".qrySmallerDisorder", vo);
    	return rtn;
    }
    
    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Questionitem save(Questionitem record){
    	if(record==null)
    		return null;
		if(record.getQuesitemid()==null||record.getQuesitemid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setQuesitemid(pkValue);
			return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk){
    	if(pk==null)
    		return 0;
		int rows = super.delete(table+".deleteByPK", pk);
		return rows;
    }
    
    /**
     * 根据问题id删除该问题下的答案选项
     * @param quesid
     * @return
     */
    public int deleteByQuesid(Long quesid){
    	if(quesid==null)
    		return 0;
    	int rows = super.delete(table+".deleteByQuesid", quesid);
    	return rows;
    }

    /**
     * 根据问题id和问题显示顺序disorder删除题目，主要是对完形填空的答案选项
     * @param quesid
     * @return
     */
    public int delByQuesidOrder(Long quesid,Integer disorder){
    	if(quesid==null)
    		return 0;
    	Questionitem item = new Questionitem();
    	item.setQuesid(quesid);
    	item.setDisorder(disorder);
    	int rows = super.delete(table+".delByQuesidOrder", item);
    	return rows;
    }
    
	/**
     * insertBatch records of List
     */
    public int insertBatch(List list){
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
       	rows = super.insertBatch(table+".insert", list);
       	return rows;
    }
    
    /**
     * deleteBatch records by the String Array of PK
     */
    public int deleteBatchByPK(String[] pkArray){
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
    	Long[] arrs = new Long[pkArray.length];
		for(int i=0;i<pkArray.length;i++){
			if(pkArray[i]!=null)
				arrs[i] = new Long(Long.parseLong(pkArray[i]));
		}
		rows = super.deleteBatch(table+".deleteByPK", arrs);
		return rows;
    }
    
    /**
     * static spring getMethod
     */
     public static QuestionitemDao getInstance(){
       	 QuestionitemDao dao = (QuestionitemDao)BeanFactory.getBeanFactory().getBean("questionitemDao");
         return dao;
     }
    
}
