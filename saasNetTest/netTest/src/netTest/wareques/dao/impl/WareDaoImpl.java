package netTest.wareques.dao.impl;

import java.util.List;

import netTest.bean.BeanFactory;
import netTest.exception.ExceptionConstant;
import netTest.wareques.dao.WareDao;
import netTest.wareques.dto.WareQuery;
import netTest.wareques.vo.Ware;

import org.apache.log4j.Logger;
import org.springframework.cache.annotation.Cacheable;

import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.cache.CacheSynchronizer;
import commonTool.constant.CommonConstant;
import commonTool.exception.LogicException;
import commonTool.exception.NeedParamsException;

public class WareDaoImpl extends BaseDao implements WareDao {

	static Logger log = Logger.getLogger(WareDaoImpl.class.getName());
	
    /**
     *
     */
    public WareDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    @Cacheable(value="netTest.questionCache", key="'WareDao.selectByPK~ware:'+#pk", unless="#result==null")
    public Ware selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Ware record = (Ware) this.queryForObject("Ware.selectByPK", pk);
		// build assoic for cache
		if(record!=null){
    	   CacheSynchronizer.getInstance().buildAssoc("netTest.questionCache", 
    			 "WareDao.selectByPK~"+Ware.ObjectType+":"+pk);
    	}
		return record;
    }
    
    /**
     * 根据题库id字符串得到题库名字字符串
     * @param wareidStr
     * @return
     */
    public String qryNamesByIds(String wareidStr){
    	if(wareidStr==null||wareidStr.trim().length()<1)
    		return "";
    	wareidStr = wareidStr.trim();
    	StringBuffer buffer = new StringBuffer();
    	String warenameStr = "";
    	if(wareidStr.startsWith(","))
    		wareidStr = wareidStr.substring(1,wareidStr.length());
    	if(wareidStr.endsWith(","))
    		wareidStr = wareidStr.substring(0, wareidStr.length()-1);
    	WareQuery queryVO = new WareQuery();
    	queryVO.setWareidStr(wareidStr);
		List list = this.queryForList("Ware.selectByVO", queryVO);
		if(list!=null&&list.size()>0){
			Ware voTemp = null;
			for(int i=0;i<list.size();i++){
				voTemp = (Ware)list.get(i);
				buffer.append(voTemp.getWarename()).append(",");
			}
			warenameStr = buffer.toString();
			if(warenameStr.endsWith(","))
				warenameStr = warenameStr.substring(0,warenameStr.length()-1);
		}
		return warenameStr;
    }
           
    /**
     * operator select records by queryVO
     */
    public List selectByVO(WareQuery queryVO){
		if(queryVO==null||queryVO.getShopid()==null)
			throw new NeedParamsException("In WareDaoImpl:selectByVO_oper:need shopid");
		List list = this.queryForList("Ware.selectByVO", queryVO);
		return list;
    }
    
    /**
     * operator select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    public Page selectByVOPage(WareQuery queryVO,int pageIndex,int pageSize,Integer total){
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        Page page = null;
        String sqlStr = "";
        if(queryVO==null){
        	page = Page.EMPTY_PAGE;
        } else {
    		if(queryVO.getShopid()==null)
    			throw new NeedParamsException("In WareDaoImpl:selectByVOPage_oper:need shopid");
        	sqlStr = "Ware.selectByVO";
        	page = queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
        }
        return page;
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Ware record){
    	if(record==null)
    		return null;
		Long pk = (Long)super.insert("Ware.insert", record);
		// flush cache
		CacheSynchronizer.getInstance().pubFlush("netTest.questionCache", Ware.ObjectType, pk.toString());
		return pk;
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Ware record){
    	if(record==null||record.getWareid()==null)
    		return 0;
		int rows = super.update("Ware.updateByPK", record);
		// flush cache
		CacheSynchronizer.getInstance().pubFlush("netTest.questionCache", Ware.ObjectType, record.getWareid().toString());
				
		return rows;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Ware save(Ware record){
    	if(record==null)
    		return null;
		if(record.getWareid()==null||record.getWareid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setWareid(pkValue);
    		return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * 删除表Ware
     */
    public int delWareByPK(Long pk){
    	if(pk==null)
    		return 0;
    	int rows = super.delete("Ware.deleteByPK", pk);
    	// flush cache
    	CacheSynchronizer.getInstance().pubFlush("netTest.questionCache", Ware.ObjectType, pk.toString());
    			
		return rows;
    }
    
    /**
     * 根据productid查询题库ware
     */
    public int delWareByProd(Long productid){
		if(productid==null)
			throw new LogicException(ExceptionConstant.Error_Need_Paramter);
		int rows = this.delete("Ware.deleteByProd", productid);
		return rows;
    }
    
//    /**
//     * deleteBatch records by the String Array of PK
//     * 删除表Ware,如果表WareQues中有外键，则会抛出异常
//     */
//    public int deleteBatchByPK(String[] pkArray){
//    	if(pkArray==null||pkArray.length<=0)
//    		return 0;
//    	int rows = 0;
//    	Long[] arrs = new Long[pkArray.length];
//		for(int i=0;i<pkArray.length;i++){
//			if(pkArray[i]!=null)
//				arrs[i] = new Long(Long.parseLong(pkArray[i]));
//		}
//		rows = super.deleteBatch("Ware.deleteByPK", arrs);
//		rows = pkArray.length;
//		return rows;
//    }
    
    /**
     * 更新题目题目数，在原有题目数量上增加或减少
     */
	public void updateQuesNumByPK(Long wareid, long number) {
		Ware vo = new Ware();
		vo.setWareid(wareid);
		vo.setWarequesnum(number);
		super.update("Ware.updateQuesNumByPK", vo);
	}
    
    /**
     * static spring getMethod
     */
     public static WareDao getInstance(){
       	 WareDao dao = (WareDao)BeanFactory.getBeanFactory().getBean("wareDao");
         return dao;
     }

    
}
