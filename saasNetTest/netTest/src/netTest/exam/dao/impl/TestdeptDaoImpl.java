package netTest.exam.dao.impl;

import java.util.ArrayList;
import java.util.List;

import netTest.bean.BeanFactory;
import netTest.exam.constant.TestdeptConstant;
import netTest.exam.dao.TestdeptDao;
import netTest.exam.dto.TestdeptQuery;
import netTest.exam.vo.Testdept;

import org.apache.log4j.Logger;

import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.constant.CommonConstant;

public class TestdeptDaoImpl extends BaseDao implements TestdeptDao {

	static Logger log = Logger.getLogger(TestdeptDaoImpl.class.getName());
	
    /**
     *
     */
    public TestdeptDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Testdept selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Testdept record = (Testdept) this.queryForObject("Testdept.selectByPK", pk);
		return record;
    }
    
    /**
     * 查询考试的统计信息单位记录，记录了本次考试的总的统计情况
     * @return
     */
    public Testdept selSatTestDept(Long testid){
    	TestdeptQuery queryVO = new TestdeptQuery();
    	queryVO.setTestid(testid);
    	queryVO.setType(TestdeptConstant.Type_TestInfo); // 查询考试的人员统计信息
    	Testdept vo = (Testdept) this.queryForObject("Testdept.selSatTestDept", queryVO);
    	return vo;
    }
    
           
    /**
     * select records by queryVO
     */
    public List selectByVO(TestdeptQuery queryVO){
		if(queryVO==null)
			return new ArrayList();
		List list = this.queryForList("Testdept.selectByVO", queryVO);
		return list;
    }
    
    /**
     * 统计考试单位的平均分和及格人数.
     * 目前仅统计组织考试单位的情况，不分别统计不同单位的情况
     * 目前每一场考试只有一个testdept
     */
    public int satDeptAvescore(Long testid,Long shopid){
		if(testid==null||shopid==null)
			return 0;
		int nums = 0;
		TestdeptQuery queryVO = new TestdeptQuery();
		queryVO.setTestid(testid);
		queryVO.setShopid(shopid);
		//List list = this.queryForList("Testdept.satDeptAvescore", queryVO);
		//if(list!=null&&list.size()>0){
			// 暂时该更新语句不包括orgbaseid的条件，即所有考试单位都设置
			//nums = super.updateBatch("Testdept.updAvescoreByLogicPk", list);
		//}
		
		Testdept testdeptVO = (Testdept)this.queryForObject("Testdept.satDeptAvescore", queryVO);
		super.update("Testdept.updAvescoreByLogicPk", testdeptVO);
		// 更新所有统计为空的为0，证明该单位没有人参加考试
		//super.update("Testdept.updNullDeptInfo", queryVO);
		return nums;
    }
    
    /**
     * select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    public Page selectByVOPage(TestdeptQuery queryVO,int pageIndex,int pageSize,Integer total){
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        Page page = null;
        String sqlStr = "";
        if(queryVO==null){
        	page = Page.EMPTY_PAGE;
        } else {
        	sqlStr = "Testdept.selectByVO";
        	page = queryForPage(sqlStr, queryVO, pageIndex, pageSize,total);
        }
        return page;
    }
    
//    /**
//     * 查询设置考试中有哪些单位是本次考试中已经有的。用于过滤考试单位
//     * 返回的是单位的串，用','隔开
//     * @param testid
//     * @param deptIdstr
//     * @param shopid
//     * @return
//     */
//    public String qryJoinTestdepts(Long testid,String deptIdstr,Long shopid){
//    	if(testid==null||shopid==null)
//    		throw new NeedParamsException("-- need the parameters in TestdeptDaoImpl.qryJoinTestdepts");
//    	TestdeptQuery queryVO = new TestdeptQuery();
//    	queryVO.setTestid(testid);
//    	queryVO.setShopid(shopid);
//    	if(deptIdstr!=null&&deptIdstr.trim().length()>0)
//    	   queryVO.setDeptIdstr(deptIdstr);
//    	List list = this.queryForList("Testdept.qryJoinTestdepts", queryVO);
//    	StringBuffer buffer = new StringBuffer();
//    	if(list!=null&&list.size()>0)
//    		for(int i=0;i<list.size();i++){
//    			buffer.append(((Long)list.get(i)).toString()).append(",");
//    		}
//    	return buffer.toString();
//    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Testdept record){
    	if(record==null)
    		return null;
		return (Long)super.insert("Testdept.insert2", record);
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Testdept record){
    	if(record==null||record.getTestdeptid()==null)
    		return 0;
		int rows = super.update("Testdept.updateByPK", record);
		return rows;
    }
    
    /**
     * update a record By LogicPK
     */
    public int updateByLogicPK(Testdept record){
    	if(record==null||record.getTestdeptid()==null)
    		return 0;
		int rows = super.update("Testdept.updateByLogicPK", record);
		return rows;
    }
    
    /**
     * 更新考试的人员数量信息，只需更新type=1的统计单位信息
     * 
     */
    public int updateExamNumSat(Testdept record){
    	if(record==null||record.getTestid()==null||record.getShopid()==null)
    		return 0;
    	if(record.getSelfexamernum()==null&&record.getExamernum()==null&&record.getExamingnum()==null
    	   &&record.getSelfexamingnum()==null&&record.getEndexamnum()==null&&record.getSelfendexamnum()==null)
    		return 0;
		int rows = super.update("Testdept.updExamNumSat", record);
		return rows;
    }
    

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Testdept save(Testdept record){
    	if(record==null)
    		return null;
		if(record.getTestdeptid()==null||record.getTestdeptid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setTestdeptid(pkValue);
    		return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk){
    	if(pk==null)
    		return 0;
		int rows = super.delete("Testdept.deleteByPK", pk);
		return rows;
    }
    
    /**
     * delete a record by Test
     */
    public int deleteByTest(Long testid,Long shopid){
    	if(testid==null||shopid==null)
    		return 0;
    	Testdept vo = new Testdept();
    	vo.setTestid(testid);
    	vo.setShopid(shopid);
		int rows = super.delete("Testdept.deleteByTest", vo);
		return rows;
    }
    
	/**
     * insertBatch records of List
     */
    public int insertBatch(List list){
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
       	rows = super.insertBatch("Testdept.insert2", list);
       	return rows;
    }
    
    /**
     * static spring getMethod
     */
     public static TestdeptDao getInstance(){
       	 TestdeptDao dao = (TestdeptDao)BeanFactory.getBeanFactory().getBean("testdeptDao");
         return dao;
     }
    
}
