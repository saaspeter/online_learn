package netTest.exam.dao.impl;

import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;
import commonTool.base.BaseDao;
import commonTool.base.Page;
import netTest.exam.constant.TestcheckerConstant;
import netTest.exam.dao.TestcheckerDao;
import commonTool.constant.CommonConstant;
import commonTool.exception.NeedParamsException;
import commonTool.util.StringUtil;
import netTest.exam.vo.Testchecker;
import netTest.exam.dto.TestcheckerQuery;
import netTest.bean.BeanFactory;

public class TestcheckerDaoImpl extends BaseDao implements TestcheckerDao {

	static Logger log = Logger.getLogger(TestcheckerDaoImpl.class.getName());
	
    /**
     *
     */
    public TestcheckerDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Testchecker selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Testchecker record = (Testchecker) this.queryForObject("Testchecker.selectByPK", pk);
		return record;
    }
    
    /**
     * select some record by logic PK
     */
    public Testchecker selectByLogicPK(Long userid, Long testid){
    	if(userid==null || testid==null)
    		return null;
    	Testchecker vo = new Testchecker();
    	vo.setUserid(userid);
    	vo.setTestid(testid);
		Testchecker record = (Testchecker) this.queryForObject("Testchecker.selectByLogicPK", vo);
		return record;
    }
           
    /**
     * select records by queryVO
     */
    public List selectByVO(TestcheckerQuery queryVO){
		if(queryVO==null)
			return new ArrayList();
		List list = this.queryForList("Testchecker.selectByVO", queryVO);
		return list;
    }
    
    /**
     * 查询阅卷人员需要评阅的考试信息列表
     * @param teststatusStr: 考试状态字符串，可以一次查询多个
     */
    public List qryCheckTestListByVO(Long userid, Long shopid, Long productid, 
    								 Short teststatus, String teststatusStr, String orderbyStr)
    {
		if(userid==null||shopid==null)
			return new ArrayList();
		TestcheckerQuery queryVO = new TestcheckerQuery();
		queryVO.setUserid(userid);
		queryVO.setShopid(shopid);
		queryVO.setProductbaseid(productid);
		if(teststatusStr!=null&&teststatusStr.trim().length()>0){
			queryVO.setTeststatusStr(teststatusStr);
			queryVO.setTeststatus(null);
		}else {
		    queryVO.setTeststatus(teststatus);
		}
		queryVO.setOrder_By_Clause(orderbyStr);
		List list = this.queryForList("Testchecker.qryCheckTestByVO", queryVO);
		return list;
    }  
    
    /**
     * select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    public Page selectByVOPage(TestcheckerQuery queryVO,int pageIndex,int pageSize,Integer total){
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        Page page = null;
        String sqlStr = "";
        if(queryVO==null){
        	page = Page.EMPTY_PAGE;
        } else {
        	sqlStr = "Testchecker.selectByVO";
        	page = queryForPage(sqlStr, queryVO, pageIndex, pageSize,total);
        }
        return page;
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Testchecker record){
    	if(record==null)
    		return null;
		return (Long)super.insert("Testchecker.insert", record);
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Testchecker record){
    	if(record==null||record.getTestid()==null)
    		return 0;
		int rows = super.update("Testchecker.updateByPK", record);
		return rows;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Testchecker save(Testchecker record){
    	if(record==null)
    		return null;
		if(record.getTestid()==null||record.getTestid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setTestid(pkValue);
    		return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long testid,Long userid){
    	if(testid==null||userid==null)
    		return 0;
    	Testchecker vo = new Testchecker();
    	vo.setTestid(testid);
    	vo.setUserid(userid);
		int rows = super.delete("Testchecker.deleteByPK", vo);
		return rows;
    }
    
    /**
     * delete a record by Test
     */
    public int deleteByTest(Long testid,Long shopid){
    	if(testid==null||shopid==null)
    		return 0;
    	Testchecker vo = new Testchecker();
    	vo.setTestid(testid);
    	vo.setShopid(shopid);
		int rows = super.delete("Testchecker.deleteByTest", vo);
		return rows;
    }
    
	/**
     * insertBatch records of List
     */
    public int insertBatch(List list){
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
       	rows = super.insertBatch("Testchecker.insert", list);
       	return rows;
    }
    
    /**
     * 批量删除阅卷老师
     * @param shopid
     * @param testid
     * @param userArr
     * @return
     */
    public int deleteCheckers(Long shopid,Long testid,String[] userArr){
    	if(shopid==null||testid==null||userArr==null||userArr.length==0)
    		return 0;
    	StringBuffer buffer = new StringBuffer();
    	for(int i=0;i<userArr.length;i++){
    		buffer.append(userArr[i]).append(",");
    	}
    	String userIdStr = buffer.toString();
    	if(userIdStr.endsWith(",")){
    		userIdStr = userIdStr.substring(0, userIdStr.length()-1);
    	}
    	TestcheckerQuery vo = new TestcheckerQuery();
    	vo.setShopid(shopid);
    	vo.setTestid(testid);
    	vo.setUserIdStr(userIdStr);
    	int rows = super.delete("Testchecker.deleteCheckers", vo);
       	return rows;
    }
    
    /**
     * 查询设置考试中已有的阅卷人员。用于过滤阅卷人员
     * 返回的是阅卷人员的串，用','隔开
     * @param testid
     * @param userIdStr
     * @param shopid
     * @return
     */
    public String qryJoinTestcheckers(Long testid,String userIdStr,Long shopid){
    	if(testid==null||shopid==null)
    		throw new NeedParamsException("-- need the parameters in TestcheckerDaoImpl.qryJoinTestcheckers");
    	TestcheckerQuery queryVO = new TestcheckerQuery();
    	queryVO.setTestid(testid);
    	queryVO.setShopid(shopid);
    	if(userIdStr!=null&&userIdStr.trim().length()>0){
    		userIdStr = userIdStr.trim();
    	    if(userIdStr.endsWith(",")){
    	    	userIdStr = userIdStr.substring(0,userIdStr.length()-1);
    	    }
    		queryVO.setUserIdStr(userIdStr);
    	}
    	List list = this.queryForList("Testchecker.qryJoinTestcheckers", queryVO);
    	StringBuffer buffer = new StringBuffer();
    	if(list!=null&&list.size()>0)
    		for(int i=0;i<list.size();i++){
    			buffer.append(((Long)list.get(i)).toString()).append(",");
    		}
    	return buffer.toString();
    }
    
	/**
	 * 批量增加阅卷人员，会过滤掉已经有的阅卷人员
	 * @param testid
	 * @param shopid
	 * @param userIdStr
	 * @return
	 */
	public int addTestcheckers(Long testid,Long shopid,String userIdStr){
		if(testid==null||shopid==null)
			throw new NeedParamsException("-- need parameters in TestdeptLogicImpl.addTestdept");
		int nums = 0;
		if(userIdStr==null||userIdStr.trim().length()<0)
			return nums;
		String[] tempArr1 = StringUtil.splitString(userIdStr, ",");
		String existcheckerStr = this.qryJoinTestcheckers(testid, userIdStr, shopid);
		
		List list = new ArrayList();
		Testchecker vo = null;
		for(int i=0;i<tempArr1.length;i++){ 
			if(!StringUtil.includeStr(existcheckerStr, tempArr1[i].trim(), null)){
				vo = new Testchecker();
				vo.setTestid(testid);
				vo.setShopid(shopid);
				vo.setIsexamcreator(TestcheckerConstant.IsExamCreator_no);
                vo.setUserid(new Long(tempArr1[i].trim()));
				vo.setCheckquesnum(0);
	            list.add(vo);
			}
		}
		nums = this.insertBatch(list);
		return nums;
	}
    
    /**
     * static spring getMethod
     */
     public static TestcheckerDao getInstance(){
       	 TestcheckerDao dao = (TestcheckerDao)BeanFactory.getBeanFactory().getBean("testcheckerDao");
         return dao;
     }
    
}
