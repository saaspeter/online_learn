package netTest.exam.dao;

import java.util.List;

import commonTool.base.Page;
import netTest.exam.vo.Testuser;
import netTest.exam.dto.TestuserQuery;

public interface TestuserDao {
   
    /**
     * select some record by PK
     */
    public Testuser selectByPK(Long pk);
    
    /**
     * select some record by LogicPK
     */
    public Testuser selectByLogicPK(Long testid,Long userid);
    
    /**
     * 为了给考生排名而查询的信息。vo中只包含分数和主键
     */
    public List selectForOrderByVO(TestuserQuery queryVO);
            
    /**
     * select records by queryVO
     */
    public List selectByVO(TestuserQuery queryVO);
    
    /**
     * select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    public Page selectByVOPage(TestuserQuery queryVO,int pageIndex,int pageSize,Integer total);
    
    /**
     * 查询用户考生是否有重复的考试信息
     * @param shopid
     * @param userid
     * @return
     */
    public List qryTestCollideUser(Long shopid,Long userid);
    
    /**
     * 查询设置考试中有哪些人员是本次考试中已经有的。用于过滤考试人员
     * 返回的是人员的串，用','隔开
     * @param testid
     * @param deptIdstr
     * @param shopid
     * @return
     */
    public String qryJoinTestusers(Long testid,String userIdstr,Long shopid);
    
    /**
     * 查询某场考试中正在考试的考生数
     * 用于手动结束考试时，提示操作员的信息
     * @param testid
     * @return
     */
    public long countInTestinguser(Long testid);
    
    /**
     * 查询考生数目
     * @param queryVO
     * @return
     */
    public long countTestuser(TestuserQuery queryVO);
    
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Testuser record);

    /**
     * update a record By PK
     */
    public int updateByPK(Testuser record);
    
    /**
     * update all test user status in a test
     */
    public int updateStatusByTestinfo(Long testid, Short fromStatus, Short toStatus);
    
    /**
     * 批量更新考生的考试排名情况，其余字段不会更新
     */
    public int updateTestOrderByPK(List<Testuser> list);

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Testuser save(Testuser record);

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk);
    
    /**
     * delete a record by testid
     */
    public int deleteByTest(Long testid,Long shopid);

	/**
     * insertBatch records of List
     */
    public int insertBatch(List list);
    
    /**
     * deleteBatch records by the String Array of PK
     */
    public int deleteBatchByPK(String[] pkArray);
    
    /**
     * 统计考生的成绩，并且更新考生的分数
     * @param testid
     * @param paperid
     * @return
     */
    public List<Testuser> sumUserScore(Long testid,Long paperid,Short queschecktype);
    
    /**
     * 考试的时候更新用户的答案。仅仅更新答案和分数的信息
     * @param list
     * @return
     */
    public int updBatchUserScore(List<Testuser> list);
    
    /**
     * 设置一场考试中考试及格
     * @param testid
     * @param paperquascore
     * @return
     */
    public int setUserQualify(Long testid,Float paperquascore);
	
}
