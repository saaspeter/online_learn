package netTest.product.dao.impl;

import java.util.Date;

import netTest.bean.BeanFactory;
import netTest.product.dao.OpenactivityDao;
import netTest.product.dto.OpenactivityQuery;
import netTest.product.vo.Openactivity;

import org.apache.log4j.Logger;

import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.util.DateUtil;
import commonTool.util.StringUtil;

public class OpenactivityDaoImpl extends BaseDao implements OpenactivityDao {

	static Logger log = Logger.getLogger(OpenactivityDaoImpl.class.getName());
	
    /**
     *
     */
    public OpenactivityDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Openactivity selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Openactivity record = (Openactivity) this.queryForObject("Openactivity.selectByPK", pk);
		return record;
    }
    
    /**
     * select plain record by PK
     */
    public Openactivity selectByPKSimple(Long pk){
    	if(pk==null)
    		return null;
		Openactivity record = (Openactivity) this.queryForObject("Openactivity.selectByPKSimple", pk);
		return record;
    }
    
    /**
     * list open activity
     * @param categoryid
     * @param name
     * @param localeid
     * @param regioncode
     * @param status
     * @param shopid
     * @param productid
     * @param starttimerange: 开始时间的查询范围: 
     * @param pageIndex: 从1开始算第一页
     * @param pageSize
     * @return
     */
    
    public Page query(Long categoryid, String name, Long localeid, 
    			   String regioncode, Short status, Long shopid, Long productid, 
    			   Date starttime1, Date starttime2, Date endtime1, Date endtime2, 
    			   Integer pageIndex, Integer pageSize,Integer total)
    {
    	if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = Page.PAGESIZE;
        
    	OpenactivityQuery queryVO = new OpenactivityQuery();
    	queryVO.setCategoryid(categoryid);
    	queryVO.setName(name);
    	queryVO.setLocaleid(localeid);
    	queryVO.setRegioncode(regioncode);
    	queryVO.setStatus(status);
    	queryVO.setShopid(shopid);
    	queryVO.setProductid(productid);
    	queryVO.setStarttime1(starttime1);
    	queryVO.setStarttime2(starttime2);
    	queryVO.setEndtime1(endtime1);
    	queryVO.setEndtime2(endtime2);
    	if(pageIndex!=null && pageSize!=null){
    	   queryVO.setRownumfrom((pageIndex-1)*pageSize);
    	   queryVO.setRownum(pageSize);
    	}
    	return queryForPage("Openactivity.selectByVO", queryVO, pageIndex, pageSize, total);
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Openactivity vo){
    	if(vo==null)
    		return null;
    	Date curDate = DateUtil.getInstance().getNowtime_GLNZ();
    	if(vo.getCreatetime()==null){
    		vo.setCreatetime(curDate);
    	}
    	if(vo.getLastupdatetime()==null){
    		vo.setLastupdatetime(curDate);
    	}
    	if(vo.getUsernum()==null){
    		vo.setUsernum(0);
    	}
		Long pk = (Long)super.insert("Openactivity.insert", vo);
		vo.setActivityid(pk);
		if(!StringUtil.isEmpty(vo.getDescription())){
		    super.insert("Openactivity.insertContent", vo);
		}
		return pk;
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Openactivity record){
    	if(record==null||record.getActivityid()==null)
    		return 0;
    	record.setLastupdatetime(DateUtil.getInstance().getNowtime_GLNZ());
		int rows = super.update("Openactivity.updateByPK", record);
		if(!StringUtil.isEmpty(record.getDescription())){
		    super.update("Openactivity.updateContentByPK", record);
		}
		return rows;
    }
    
    /**
     * update userNum By PK
     * @param increaseNum: can be positive or negative
     */
    public int updateUserNum(Long activityid, Integer increaseNum){
    	if(activityid==null||increaseNum==null)
    		return 0;
    	Openactivity vo = new Openactivity();
    	vo.setActivityid(activityid);
    	vo.setUsernum(increaseNum);
		int rows = super.update("Openactivity.updateUserNum", vo);
		return rows;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Openactivity save(Openactivity record){
    	if(record==null)
    		return null;
		if(record.getActivityid()==null||record.getActivityid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setActivityid(pkValue);
    		return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk){
    	if(pk==null)
    		return 0;
    	OpenactivitymemberDaoImpl.getInstance().deleteByActivity(pk);
    	super.delete("Openactivity.deleteContentByPK", pk);
		int rows = super.delete("Openactivity.deleteByPK", pk);
		return rows;
    }

    
    /**
     * static spring getMethod
     */
     public static OpenactivityDao getInstance(){
       	 OpenactivityDao dao = (OpenactivityDao)BeanFactory.getBeanFactory().getBean("openactivityDao");
         return dao;
     }
    
}
