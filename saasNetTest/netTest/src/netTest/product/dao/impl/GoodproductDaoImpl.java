package netTest.product.dao.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import netTest.bean.BeanFactory;
import netTest.exception.ExceptionConstant;
import netTest.product.dao.GoodproductDao;
import netTest.product.vo.Goodproduct;
import org.apache.log4j.Logger;
import org.springframework.cache.annotation.Cacheable;
import commonTool.base.BaseDao;
import commonTool.cache.CacheSynchronizer;
import commonTool.exception.LogicException;


public class GoodproductDaoImpl extends BaseDao implements GoodproductDao {

	static Logger log = Logger.getLogger(GoodproductDaoImpl.class.getName());
	
    /**
     *
     */
    public GoodproductDaoImpl() {
        super();
    }
    
    /**
     * select by pk
     * @return
     */
//    public Goodproduct selectByPK(Long productbaseid, Long categoryid){
//    	Goodproduct vo = new Goodproduct();
//    	vo.setProductbaseid(productbaseid);
//    	vo.setCategoryid(categoryid);
//    	Goodproduct record = (Goodproduct) this.queryForObject("Goodproduct.selectByPK", vo);
//		return record;
//    }
    
    /**
     * 根据传入的productid,返回是系统推荐产品的id集合
     * 不做cache
     * @return
     */
    public Map<Long, Goodproduct> selectByPkStr(String productidStr){
        if(productidStr==null){
        	return null;
        }
        if(productidStr.endsWith(",")){
        	productidStr = productidStr.substring(0, productidStr.length()-1);
        }
        List<Goodproduct> idList = (List<Goodproduct>) this.queryForList("Goodproduct.selectByPkStr", productidStr);
        Map<Long, Goodproduct> map = new HashMap<Long, Goodproduct>();
        for(Goodproduct votemp : idList){
        	if(votemp!=null){
        		map.put(votemp.getProductbaseid(), votemp);
        	}
        }
        return map;
    }
    
    /**
     * 查询系统推荐的产品, scope包括本localeid的和全localeid的产品
     * @param producttype
     * @param categoryid
     * @param localeid
     * @return
     */
    @Cacheable(value="netTest.productCache", 
    		   key="'GoodproductDao.selGoodproduct~'+#categoryid+'~'+#localeid")
    public Map<Long, Goodproduct> selGoodproduct(Long categoryid, Long localeid) {
		if(categoryid==null||localeid==null)
			return null;
		Map<Long, Goodproduct> rtnMap = null;
		
		Goodproduct queryvo = new Goodproduct();
		queryvo.setCategoryid(categoryid);
		queryvo.setLocaleid(localeid);
		queryvo.setIsIncludeChild(1);
		List<Goodproduct> list = (List<Goodproduct>)this.queryForList("Goodproduct.selGoodProduct", queryvo);
		if(list!=null && list.size()>0){
			rtnMap = new HashMap<Long, Goodproduct>();
			for(Goodproduct vo : list){
				rtnMap.put(vo.getProductbaseid(), vo);
			}
		}
		
		// add cache assoic
    	CacheSynchronizer.getInstance().buildAssoc("netTest.productCache", 
					  "GoodproductDao.selGoodproduct~"+categoryid+"~"+localeid, 
					  new String[]{ProductbaseDaoImpl.CateForProductType+":"+categoryid});
		
		return rtnMap;
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Goodproduct record){
    	if(record==null||record.getCategoryid()==null
    			||record.getProductbaseid()==null||record.getShopid()==null)
    		throw new LogicException(ExceptionConstant.Error_Need_Paramter);
		Long pk = (Long)super.insert("Goodproduct.insert", record);
		
		// flush cache
		//CacheSynchronizer.getInstance().pubFlush("netTest.productCache", ProductbaseDaoImpl.IsGoodProdTypeCache, ProductConstant.Isopen_yes.toString());
		CacheSynchronizer.getInstance().pubFlush("netTest.productCache", ProductbaseDaoImpl.CateForProductType, record.getCategoryid().toString());
		
		return pk;
    }

//    /**
//     * update a record By PK
//     */
//    public int updateByPK(Goodproduct record){
//    	if(record==null||record.getProductbaseid()==null||record.getCategoryid()==null)
//    		return 0;
//		int rows = super.update("Goodproduct.updateByPK", record);
//		return rows;
//    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long productbaseid, Long categoryid){
    	if(productbaseid==null||categoryid==null)
    		return 0;
    	Goodproduct vo = new Goodproduct();
    	vo.setProductbaseid(productbaseid);
    	vo.setCategoryid(categoryid);
		int rows = super.delete("Goodproduct.deleteByPK", vo);
		
		// flush cache
		//CacheSynchronizer.getInstance().pubFlush("netTest.productCache", ProductbaseDaoImpl.IsGoodProdTypeCache, ProductConstant.Isopen_no.toString());
		CacheSynchronizer.getInstance().pubFlush("netTest.productCache", ProductbaseDaoImpl.CateForProductType, categoryid.toString());
		
		return rows;
    }
        
    /**
     * static spring getMethod
     */
     public static GoodproductDao getInstance(){
       	 GoodproductDao dao = (GoodproductDao)BeanFactory.getBeanFactory().getBean("goodproductDao");
         return dao;
     }
    
}
