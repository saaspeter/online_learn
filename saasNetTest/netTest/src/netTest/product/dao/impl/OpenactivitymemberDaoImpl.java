package netTest.product.dao.impl;

import java.util.List;

import netTest.bean.BeanFactory;
import netTest.product.dao.OpenactivitymemberDao;
import netTest.product.dto.OpenactivitymemberQuery;
import netTest.product.vo.Openactivitymember;

import org.apache.log4j.Logger;

import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.constant.CommonConstant;

public class OpenactivitymemberDaoImpl extends BaseDao implements OpenactivitymemberDao {

	static Logger log = Logger.getLogger(OpenactivitymemberDaoImpl.class.getName());
	
    /**
     *
     */
    public OpenactivitymemberDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Openactivitymember selectByPK(Long activityid, Long userid){
    	if(activityid==null || userid==null)
    		return null;
    	OpenactivitymemberQuery queryVO = new OpenactivitymemberQuery();
    	queryVO.setActivityid(activityid);
    	queryVO.setUserid(userid);
		Openactivitymember record = (Openactivitymember) this.queryForObject("Openactivitymember.selectByPK", queryVO);
		return record;
    }   
    
    public Page selectByVOPage(Long activityid, Long userid, Short joinstatus,
    		                   int pageIndex, int pageSize, Integer total)
    {
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        if(activityid==null && userid==null){
        	return Page.EMPTY_PAGE;
        }
        
        OpenactivitymemberQuery queryVO = new OpenactivitymemberQuery();
        queryVO.setActivityid(activityid);
        queryVO.setUserid(userid);
        queryVO.setJoinstatus(joinstatus);
        if(userid!=null){
        	queryVO.setOrder_By_Clause("registerTime desc");
        }
        
        String sqlStr = "Openactivitymember.selectByVO";
        Page page = queryForPage(sqlStr, queryVO, pageIndex, pageSize, total);
        
        return page;
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Openactivitymember record){
    	if(record==null)
    		return null;
		return (Long)super.insert("Openactivitymember.insert", record);
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Openactivitymember record){
    	if(record==null||record.getActivityid()==null||record.getUserid()==null)
    		return 0;
		int rows = super.update("Openactivitymember.updateByPK", record);
		return rows;
    }

    /**
     * update the record if exists pk, else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Openactivitymember save(Openactivitymember record){
    	if(record==null||record.getActivityid()==null||record.getUserid()==null)
    		return null;
    	Openactivitymember vo = selectByPK(record.getActivityid(), record.getUserid());
		if(vo==null){
			this.insert(record);
		}else{
			this.updateByPK(record);
		}
		return record;
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long activityid, Long userid){
    	if(activityid==null || userid==null)
    		return 0;
    	Openactivitymember vo = new Openactivitymember();
    	vo.setActivityid(activityid);
    	vo.setUserid(userid);
		int rows = super.delete("Openactivitymember.deleteByPK", vo);
		return rows;
    }
    
    
    public int deleteByActivity(Long activityid){
    	if(activityid==null)
    		return 0;
		int rows = super.delete("Openactivitymember.deleteByActivity", activityid);
		return rows;
    }
    
	/**
     * insertBatch records of List
     */
    public int insertBatch(List list){
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
       	rows = super.insertBatch("Openactivitymember.insert", list);
       	return rows;
    }
    
    /**
     * deleteBatch records by the String Array of PK
     */
    public int deleteBatch(Long activityid, Long[] userIdArray){
    	if(activityid==null || userIdArray==null||userIdArray.length<=0)
    		return 0;
    	int rows = 0;
    	StringBuffer userBuffer = new StringBuffer();
    	Long[] arrs = new Long[userIdArray.length];
		for(int i=0;i<userIdArray.length;i++){
			if(userIdArray[i]!=null){
				userBuffer.append(String.valueOf(userIdArray[i])).append(",");
			}
		}
		String useridstr = userBuffer.toString();
		if(useridstr.endsWith(",")){
			useridstr = useridstr.substring(0, useridstr.length()-1);
		}
		 OpenactivitymemberQuery queryVO = new OpenactivitymemberQuery();
	     queryVO.setActivityid(activityid);
	     queryVO.setUseridstr(useridstr);
		rows = super.delete("Openactivitymember.deleteBatch", queryVO);
		return rows;
    }
    
    /**
     * static spring getMethod
     */
     public static OpenactivitymemberDao getInstance(){
       	 OpenactivitymemberDao dao = (OpenactivitymemberDao)BeanFactory.getBeanFactory().getBean("openactivitymemberDao");
         return dao;
     }
    
}
