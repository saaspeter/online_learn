package netTest.dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import netTest.vo.Quesdifficult;
import netTest.vo.QuesdifficultExample;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

public class QuesdifficultDAOImpl extends SqlMapClientDaoSupport implements QuesdifficultDAO {

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table quesdifficult
     *
     * @abatorgenerated Tue Jul 31 09:18:14 CST 2007
     */
    public QuesdifficultDAOImpl() {
        super();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table quesdifficult
     *
     * @abatorgenerated Tue Jul 31 09:18:14 CST 2007
     */
    public void insert(Quesdifficult record) {
        getSqlMapClientTemplate().insert("quesdifficult.abatorgenerated_insert", record);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table quesdifficult
     *
     * @abatorgenerated Tue Jul 31 09:18:14 CST 2007
     */
    public int updateByPrimaryKey(Quesdifficult record) {
        int rows = getSqlMapClientTemplate().update("quesdifficult.abatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table quesdifficult
     *
     * @abatorgenerated Tue Jul 31 09:18:14 CST 2007
     */
    public int updateByPrimaryKeySelective(Quesdifficult record) {
        int rows = getSqlMapClientTemplate().update("quesdifficult.abatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table quesdifficult
     *
     * @abatorgenerated Tue Jul 31 09:18:14 CST 2007
     */
    public List selectByExample(QuesdifficultExample example, String orderByClause) {
        Map parms = getExampleParms(example);
        if (orderByClause != null) {
            parms.put("ABATOR_ORDER_BY_CLAUSE", orderByClause);
        }
        List list = getSqlMapClientTemplate().queryForList("quesdifficult.abatorgenerated_selectByExample", parms);
        return list;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table quesdifficult
     *
     * @abatorgenerated Tue Jul 31 09:18:14 CST 2007
     */
    public List selectByExample(QuesdifficultExample example) {
        return selectByExample(example, null);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table quesdifficult
     *
     * @abatorgenerated Tue Jul 31 09:18:14 CST 2007
     */
    public Quesdifficult selectByPrimaryKey(Long difficultid) {
        Quesdifficult key = new Quesdifficult();
        key.setDifficultid(difficultid);
        Quesdifficult record = (Quesdifficult) getSqlMapClientTemplate().queryForObject("quesdifficult.abatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table quesdifficult
     *
     * @abatorgenerated Tue Jul 31 09:18:14 CST 2007
     */
    public int deleteByExample(QuesdifficultExample example) {
        int rows = getSqlMapClientTemplate().delete("quesdifficult.abatorgenerated_deleteByExample", getExampleParms(example));
        return rows;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table quesdifficult
     *
     * @abatorgenerated Tue Jul 31 09:18:14 CST 2007
     */
    public int deleteByPrimaryKey(Long difficultid) {
        Quesdifficult key = new Quesdifficult();
        key.setDifficultid(difficultid);
        int rows = getSqlMapClientTemplate().delete("quesdifficult.abatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table quesdifficult
     *
     * @abatorgenerated Tue Jul 31 09:18:14 CST 2007
     */
    private Map getdifficultIDExampleParms(QuesdifficultExample example) {
        Map parms = new HashMap();
        switch (example.getDifficultid_Indicator()) {
        case QuesdifficultExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultID_NULL", "Y");
            } else {
                parms.put("AND_difficultID_NULL", "Y");
            }
            break;
        case QuesdifficultExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultID_NOT_NULL", "Y");
            } else {
                parms.put("AND_difficultID_NOT_NULL", "Y");
            }
            break;
        case QuesdifficultExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultID_EQUALS", "Y");
            } else {
                parms.put("AND_difficultID_EQUALS", "Y");
            }
            parms.put("difficultid", example.getDifficultid());
            break;
        case QuesdifficultExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultID_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_difficultID_NOT_EQUALS", "Y");
            }
            parms.put("difficultid", example.getDifficultid());
            break;
        case QuesdifficultExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultID_GT", "Y");
            } else {
                parms.put("AND_difficultID_GT", "Y");
            }
            parms.put("difficultid", example.getDifficultid());
            break;
        case QuesdifficultExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultID_GE", "Y");
            } else {
                parms.put("AND_difficultID_GE", "Y");
            }
            parms.put("difficultid", example.getDifficultid());
            break;
        case QuesdifficultExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultID_LT", "Y");
            } else {
                parms.put("AND_difficultID_LT", "Y");
            }
            parms.put("difficultid", example.getDifficultid());
            break;
        case QuesdifficultExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultID_LE", "Y");
            } else {
                parms.put("AND_difficultID_LE", "Y");
            }
            parms.put("difficultid", example.getDifficultid());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table quesdifficult
     *
     * @abatorgenerated Tue Jul 31 09:18:14 CST 2007
     */
    private Map getproductIDExampleParms(QuesdifficultExample example) {
        Map parms = new HashMap();
        switch (example.getProductid_Indicator()) {
        case QuesdifficultExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_productID_NULL", "Y");
            } else {
                parms.put("AND_productID_NULL", "Y");
            }
            break;
        case QuesdifficultExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_productID_NOT_NULL", "Y");
            } else {
                parms.put("AND_productID_NOT_NULL", "Y");
            }
            break;
        case QuesdifficultExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_productID_EQUALS", "Y");
            } else {
                parms.put("AND_productID_EQUALS", "Y");
            }
            parms.put("productid", example.getProductid());
            break;
        case QuesdifficultExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_productID_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_productID_NOT_EQUALS", "Y");
            }
            parms.put("productid", example.getProductid());
            break;
        case QuesdifficultExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_productID_GT", "Y");
            } else {
                parms.put("AND_productID_GT", "Y");
            }
            parms.put("productid", example.getProductid());
            break;
        case QuesdifficultExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_productID_GE", "Y");
            } else {
                parms.put("AND_productID_GE", "Y");
            }
            parms.put("productid", example.getProductid());
            break;
        case QuesdifficultExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_productID_LT", "Y");
            } else {
                parms.put("AND_productID_LT", "Y");
            }
            parms.put("productid", example.getProductid());
            break;
        case QuesdifficultExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_productID_LE", "Y");
            } else {
                parms.put("AND_productID_LE", "Y");
            }
            parms.put("productid", example.getProductid());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table quesdifficult
     *
     * @abatorgenerated Tue Jul 31 09:18:14 CST 2007
     */
    private Map getshopIDExampleParms(QuesdifficultExample example) {
        Map parms = new HashMap();
        switch (example.getShopid_Indicator()) {
        case QuesdifficultExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_shopID_NULL", "Y");
            } else {
                parms.put("AND_shopID_NULL", "Y");
            }
            break;
        case QuesdifficultExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_shopID_NOT_NULL", "Y");
            } else {
                parms.put("AND_shopID_NOT_NULL", "Y");
            }
            break;
        case QuesdifficultExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_shopID_EQUALS", "Y");
            } else {
                parms.put("AND_shopID_EQUALS", "Y");
            }
            parms.put("shopid", example.getShopid());
            break;
        case QuesdifficultExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_shopID_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_shopID_NOT_EQUALS", "Y");
            }
            parms.put("shopid", example.getShopid());
            break;
        case QuesdifficultExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_shopID_GT", "Y");
            } else {
                parms.put("AND_shopID_GT", "Y");
            }
            parms.put("shopid", example.getShopid());
            break;
        case QuesdifficultExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_shopID_GE", "Y");
            } else {
                parms.put("AND_shopID_GE", "Y");
            }
            parms.put("shopid", example.getShopid());
            break;
        case QuesdifficultExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_shopID_LT", "Y");
            } else {
                parms.put("AND_shopID_LT", "Y");
            }
            parms.put("shopid", example.getShopid());
            break;
        case QuesdifficultExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_shopID_LE", "Y");
            } else {
                parms.put("AND_shopID_LE", "Y");
            }
            parms.put("shopid", example.getShopid());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table quesdifficult
     *
     * @abatorgenerated Tue Jul 31 09:18:14 CST 2007
     */
    private Map getdifficultNameExampleParms(QuesdifficultExample example) {
        Map parms = new HashMap();
        switch (example.getDifficultname_Indicator()) {
        case QuesdifficultExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultName_NULL", "Y");
            } else {
                parms.put("AND_difficultName_NULL", "Y");
            }
            break;
        case QuesdifficultExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultName_NOT_NULL", "Y");
            } else {
                parms.put("AND_difficultName_NOT_NULL", "Y");
            }
            break;
        case QuesdifficultExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultName_EQUALS", "Y");
            } else {
                parms.put("AND_difficultName_EQUALS", "Y");
            }
            parms.put("difficultname", example.getDifficultname());
            break;
        case QuesdifficultExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultName_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_difficultName_NOT_EQUALS", "Y");
            }
            parms.put("difficultname", example.getDifficultname());
            break;
        case QuesdifficultExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultName_GT", "Y");
            } else {
                parms.put("AND_difficultName_GT", "Y");
            }
            parms.put("difficultname", example.getDifficultname());
            break;
        case QuesdifficultExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultName_GE", "Y");
            } else {
                parms.put("AND_difficultName_GE", "Y");
            }
            parms.put("difficultname", example.getDifficultname());
            break;
        case QuesdifficultExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultName_LT", "Y");
            } else {
                parms.put("AND_difficultName_LT", "Y");
            }
            parms.put("difficultname", example.getDifficultname());
            break;
        case QuesdifficultExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultName_LE", "Y");
            } else {
                parms.put("AND_difficultName_LE", "Y");
            }
            parms.put("difficultname", example.getDifficultname());
            break;
        case QuesdifficultExample.EXAMPLE_LIKE:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultName_LIKE", "Y");
            } else {
                parms.put("AND_difficultName_LIKE", "Y");
            }
            parms.put("difficultname", example.getDifficultname());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table quesdifficult
     *
     * @abatorgenerated Tue Jul 31 09:18:14 CST 2007
     */
    private Map getdifficultValueExampleParms(QuesdifficultExample example) {
        Map parms = new HashMap();
        switch (example.getDifficultvalue_Indicator()) {
        case QuesdifficultExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultValue_NULL", "Y");
            } else {
                parms.put("AND_difficultValue_NULL", "Y");
            }
            break;
        case QuesdifficultExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultValue_NOT_NULL", "Y");
            } else {
                parms.put("AND_difficultValue_NOT_NULL", "Y");
            }
            break;
        case QuesdifficultExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultValue_EQUALS", "Y");
            } else {
                parms.put("AND_difficultValue_EQUALS", "Y");
            }
            parms.put("difficultvalue", example.getDifficultvalue());
            break;
        case QuesdifficultExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultValue_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_difficultValue_NOT_EQUALS", "Y");
            }
            parms.put("difficultvalue", example.getDifficultvalue());
            break;
        case QuesdifficultExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultValue_GT", "Y");
            } else {
                parms.put("AND_difficultValue_GT", "Y");
            }
            parms.put("difficultvalue", example.getDifficultvalue());
            break;
        case QuesdifficultExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultValue_GE", "Y");
            } else {
                parms.put("AND_difficultValue_GE", "Y");
            }
            parms.put("difficultvalue", example.getDifficultvalue());
            break;
        case QuesdifficultExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultValue_LT", "Y");
            } else {
                parms.put("AND_difficultValue_LT", "Y");
            }
            parms.put("difficultvalue", example.getDifficultvalue());
            break;
        case QuesdifficultExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_difficultValue_LE", "Y");
            } else {
                parms.put("AND_difficultValue_LE", "Y");
            }
            parms.put("difficultvalue", example.getDifficultvalue());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table quesdifficult
     *
     * @abatorgenerated Tue Jul 31 09:18:14 CST 2007
     */
    private Map getvisibleExampleParms(QuesdifficultExample example) {
        Map parms = new HashMap();
        switch (example.getVisible_Indicator()) {
        case QuesdifficultExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_visible_NULL", "Y");
            } else {
                parms.put("AND_visible_NULL", "Y");
            }
            break;
        case QuesdifficultExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_visible_NOT_NULL", "Y");
            } else {
                parms.put("AND_visible_NOT_NULL", "Y");
            }
            break;
        case QuesdifficultExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_visible_EQUALS", "Y");
            } else {
                parms.put("AND_visible_EQUALS", "Y");
            }
            parms.put("visible", example.getVisible());
            break;
        case QuesdifficultExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_visible_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_visible_NOT_EQUALS", "Y");
            }
            parms.put("visible", example.getVisible());
            break;
        case QuesdifficultExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_visible_GT", "Y");
            } else {
                parms.put("AND_visible_GT", "Y");
            }
            parms.put("visible", example.getVisible());
            break;
        case QuesdifficultExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_visible_GE", "Y");
            } else {
                parms.put("AND_visible_GE", "Y");
            }
            parms.put("visible", example.getVisible());
            break;
        case QuesdifficultExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_visible_LT", "Y");
            } else {
                parms.put("AND_visible_LT", "Y");
            }
            parms.put("visible", example.getVisible());
            break;
        case QuesdifficultExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_visible_LE", "Y");
            } else {
                parms.put("AND_visible_LE", "Y");
            }
            parms.put("visible", example.getVisible());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table quesdifficult
     *
     * @abatorgenerated Tue Jul 31 09:18:14 CST 2007
     */
    private Map getExampleParms(QuesdifficultExample example) {
        Map parms = new HashMap();
        parms.putAll(getdifficultIDExampleParms(example));
        parms.putAll(getproductIDExampleParms(example));
        parms.putAll(getshopIDExampleParms(example));
        parms.putAll(getdifficultNameExampleParms(example));
        parms.putAll(getdifficultValueExampleParms(example));
        parms.putAll(getvisibleExampleParms(example));
        return parms;
    }
}