package commonTool.biz.dao.impl;

import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;
import commonTool.base.BaseDao;
import commonTool.base.Page;
import commonTool.biz.dao.SystemlogDao;
import commonTool.constant.CommonConstant;
import commonTool.biz.vo.Systemlog;
import commonTool.biz.dto.SystemlogQuery;
import commonTool.bean.BeanFactory;

public class SystemlogDaoImpl extends BaseDao implements SystemlogDao {

	static Logger log = Logger.getLogger(SystemlogDaoImpl.class.getName());
	
    /**
     *
     */
    public SystemlogDaoImpl() {
        super();
    }
    
    /**
     * select some record by PK
     */
    public Systemlog selectByPK(Long pk){
    	if(pk==null)
    		return null;
		Systemlog record = (Systemlog) this.queryForObject("Systemlog.selectByPK", pk);
		return record;
    }
           
    /**
     * select records by queryVO
     */
    public List selectByVO(SystemlogQuery queryVO){
		if(queryVO==null)
			return new ArrayList();
		List list = this.queryForList("Systemlog.selectByVO", queryVO);
		return list;
    }
    
    /**
     * select page by queryVO 
     * @param queryVO:the query vo,if queryVO is null,then search all
     * @param pageIndex:the current page num,start from 1;
     * @param pageSize:the page size,if less equal than 0,the default PlatfromConstant.PAGESIZE will be used;
     * @return Page
     * @throws Exception
     */
    public Page selectByVOPage(SystemlogQuery queryVO,int pageIndex,int pageSize){
        if(pageIndex<=0)
        	pageIndex = 1;
        if(pageSize<=0)
        	pageSize = CommonConstant.PAGESIZE;
        Page page = null;
        String sqlStr = "";
        if(queryVO==null){
        	page = Page.EMPTY_PAGE;
        } else {
        	sqlStr = "Systemlog.selectByVO";
        	page = queryForPage(sqlStr, queryVO, pageIndex, pageSize);
        }
        return page;
    }
       
    /**
     * insert a record
     * @return Object with the PK(generated by DB)
     */
    public Long insert(Systemlog record){
    	if(record==null)
    		return null;
		return (Long)super.insert("Systemlog.insert", record);
    }

    /**
     * update a record By PK
     */
    public int updateByPK(Systemlog record){
    	if(record==null||record.getLogid()==null)
    		return 0;
		int rows = super.update("Systemlog.updateByPK", record);
		return rows;
    }

    /**
     * update the record if exists pk,else insert the record
     * @param record
     * @return
     * @throws Exception
     */
    public Systemlog save(Systemlog record){
    	if(record==null)
    		return null;
		if(record.getLogid()==null||record.getLogid().intValue()==0){
			Long pkValue = this.insert(record);
			record.setLogid(pkValue);
    		return record;
		}else{
			this.updateByPK(record);
			return record;
		}
    }

    /**
     * delete a record by PK
     */
    public int deleteByPK(Long pk){
    	if(pk==null)
    		return 0;
		int rows = super.delete("Systemlog.deleteByPK", pk);
		return rows;
    }
    
	/**
     * insertBatch records of List
     */
    public int insertBatch(List list){
    	if(list==null||list.size()<=0)
    		return 0;
    	int rows = 0;
       	rows = super.insertBatch("Systemlog.insert", list);
       	return rows;
    }
    
    /**
     * deleteBatch records by the String Array of PK
     */
    public int deleteBatchByPK(String[] pkArray){
    	if(pkArray==null||pkArray.length<=0)
    		return 0;
    	int rows = 0;
    	Long[] arrs = new Long[pkArray.length];
		for(int i=0;i<pkArray.length;i++){
			if(pkArray[i]!=null)
				arrs[i] = new Long(Long.parseLong(pkArray[i]));
		}
		rows = super.deleteBatch("Systemlog.deleteByPK", arrs);
		return rows;
    }
    
    /**
     * static spring getMethod
     */
     public static SystemlogDao getInstance(){
       	 SystemlogDao dao = (SystemlogDao)BeanFactory.getBeanFactory().getBean("systemlogDao");
         return dao;
     }
    
}
